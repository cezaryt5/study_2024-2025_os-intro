---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05-24"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19
## Title
title: "Лабораторная работа №13"
subtitle: "Работа с shell скриптами"
license: CC BY
date: today
date-format: "YYYY-MM-DD"
---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="100%"}

  * Mohamed Musa
  * Студент
  * Группа НКАбд-05-24, 2 год
  * Студенческий билет: 1032248286
  * Российский университет дружбы народов
  * [1032248286@pfur.ru](mailto:1032248286@pfur.ru)

:::
::::::::::::::

# Вводная часть

## Актуальность

::: incremental
- Shell скрипты — основа автоматизации в Linux
- Необходимы для системного администрирования
- Повышают производительность работы
- Упрощают выполнение рутинных задач
:::

## Объект и предмет исследования

**Объект исследования:**

- Shell скрипты в операционной системе Linux

**Предмет исследования:**

- Синтаксис и структура bash скриптов
- Переменные, условия, циклы и функции
- Методы отладки скриптов

## Цели и задачи

**Цель работы:**

Изучить основы создания и выполнения shell скриптов в Linux

**Задачи:**

::: incremental
- Освоить создание shell скриптов
- Научиться работать с переменными и параметрами
- Изучить условные операторы и циклы
- Практиковать обработку аргументов командной строки
- Освоить отладку скриптов
:::

## Материалы и методы

**Используемые инструменты:**

::: incremental
- Bash shell — интерпретатор команд
- Текстовый редактор — для создания скриптов
- Команды chmod — для установки прав выполнения
- Опции отладки — bash -x, -v, -n
:::

# Теоретические сведения

## Что такое Shell скрипты

**Shell скрипт** — текстовый файл с последовательностью команд

**Преимущества:**

::: incremental
- Автоматизация повторяющихся задач
- Простота создания и редактирования
- Прямой доступ к системным командам
- Портативность между Unix-системами
- Быстрая разработка и тестирование
:::

## Структура скрипта

**Основные элементы:**

```bash
#!/bin/bash
# Комментарий

variable="value"
echo $variable

if [ condition ]; then
    # действия
fi

for i in {1..5}; do
    echo $i
done
```

## Shebang

**Shebang** — первая строка скрипта, указывает интерпретатор

**Примеры:**

::: incremental
- `#!/bin/bash` — Bash shell
- `#!/bin/sh` — Bourne shell (POSIX)
- `#!/usr/bin/env bash` — Bash через env (портативно)
:::

## Переменные

**Объявление:**

```bash
name="Alice"
age=25
```

**Использование:**

```bash
echo $name
echo ${name}
echo "${name}!"
```

**Правила:**

- БЕЗ пробелов вокруг `=`
- Регистрозависимые
- Начинаются с буквы или `_`

## Специальные переменные

**Параметры скрипта:**

::: incremental
- `$0` — имя скрипта
- `$1`, `$2`, ... — позиционные параметры
- `$#` — количество аргументов
- `$@` — все аргументы
- `$?` — код возврата последней команды
- `$$` — PID текущего процесса
:::

## Переменные окружения

**Основные переменные:**

::: incremental
- `$HOME` — домашняя директория
- `$USER` — имя пользователя
- `$PWD` — текущая директория
- `$PATH` — пути поиска команд
- `$SHELL` — путь к оболочке
:::

## Условный оператор if

**Синтаксис:**

```bash
if [ condition ]; then
    # команды
elif [ condition2 ]; then
    # команды
else
    # команды
fi
```

## Операторы сравнения

**Числовые:**

::: incremental
- `-eq` — равно
- `-ne` — не равно
- `-gt` — больше
- `-lt` — меньше
- `-ge` — больше или равно
- `-le` — меньше или равно
:::

## Строковые сравнения

::: incremental
- `=` или `==` — строки равны
- `!=` — строки не равны
- `-z` — строка пустая
- `-n` — строка не пустая
:::

## Проверка файлов

::: incremental
- `-e` — файл существует
- `-f` — обычный файл
- `-d` — директория
- `-r` — доступен для чтения
- `-w` — доступен для записи
- `-x` — исполняемый
:::

## Оператор case

**Синтаксис:**

```bash
case $variable in
    pattern1)
        # команды
        ;;
    pattern2)
        # команды
        ;;
    *)
        # по умолчанию
        ;;
esac
```

## Цикл for

**Примеры:**

```bash
# Диапазон
for i in {1..10}; do
    echo $i
done

# Файлы
for file in *.txt; do
    echo "Файл: $file"
done
```

## Цикл while

**Синтаксис:**

```bash
counter=1
while [ $counter -le 5 ]; do
    echo "Итерация: $counter"
    ((counter++))
done
```

## Функции

**Объявление:**

```bash
greet() {
    echo "Привет, $1!"
}

# Вызов
greet "Alice"
```

**Параметры:**

- `$1`, `$2`, ... — позиционные параметры
- `$#` — количество параметров
- `$@` — все параметры

## Локальные переменные

**Использование local:**

```bash
my_function() {
    local local_var="локальная"
    global_var="глобальная"
}
```

## Отладка скриптов

**Опции:**

::: incremental
- `bash -x script.sh` — трассировка выполнения
- `bash -v script.sh` — вывод строк
- `bash -n script.sh` — проверка синтаксиса
:::

**В скрипте:**

```bash
set -x    # включить трассировку
set +x    # выключить трассировку
set -e    # прервать при ошибке
```

# Выполнение работы

## Содержимое скрипта 1

![Содержимое скрипта 1](image/content1.png){width=70%}

## Содержимое скрипта 2

![Содержимое скрипта 2](image/content2.png){width=70%}

## Содержимое shell скрипта

![Содержимое shell скрипта](image/shcontent1.png){width=70%}

## Программный код

![Программный код](image/program1.png){width=70%}

## Запуск программ

![Запуск программ](image/run2.png){width=70%}

## Практические примеры

Были созданы скрипты:

::: incremental
- Скрипт приветствия с учетом времени
- Скрипт обработки файлов с циклами
- Калькулятор с функциями
- Скрипт с обработкой опций
- Интерактивное меню
:::

## Скрипт с переменными

```bash
#!/bin/bash
name=$1
current_hour=$(date +%H)

echo "Привет, $name!"

if [ $current_hour -lt 12 ]; then
    echo "Доброе утро!"
elif [ $current_hour -lt 18 ]; then
    echo "Добрый день!"
else
    echo "Добрый вечер!"
fi
```

## Скрипт с циклами

```bash
#!/bin/bash
count=0

for file in *.txt; do
    ((count++))
    echo "[$count] Файл: $file"
    echo "    Строк: $(wc -l < "$file")"
    echo "    Слов: $(wc -w < "$file")"
done

echo "Всего файлов: $count"
```

## Скрипт с функциями

```bash
#!/bin/bash

add() {
    echo $(($1 + $2))
}

multiply() {
    echo $(($1 * $2))
}

echo "10 + 5 = $(add 10 5)"
echo "10 * 5 = $(multiply 10 5)"
```

# Результаты

## Выполненные задачи (1)

::: incremental
- ✅ **Освоено создание shell скриптов**
  - Структура с shebang
  - Создание исполняемых файлов
  - Различные способы запуска
:::

## Выполненные задачи (2)

::: incremental
- ✅ **Изучена работа с переменными**
  - Объявление и использование
  - Специальные переменные
  - Переменные окружения
  - Операции с переменными
:::

## Выполненные задачи (3)

::: incremental
- ✅ **Практикованы условные операторы**
  - Оператор if-elif-else
  - Операторы сравнения
  - Логические операторы
  - Оператор case
:::

## Выполненные задачи (4)

::: incremental
- ✅ **Освоены циклы**
  - Цикл for (диапазоны, файлы)
  - Цикл while
  - Цикл until
  - Команды break и continue
:::

## Выполненные задачи (5)

::: incremental
- ✅ **Изучена отладка скриптов**
  - Опции bash (-x, -v, -n)
  - Команды set
  - Отладочные сообщения
  - Проверка синтаксиса
:::

## Дополнительные навыки

::: incremental
- ✅ Создание функций с параметрами
- ✅ Работа с файлами
- ✅ Интерактивные скрипты
- ✅ Обработка текста
- ✅ Управление потоками
- ✅ Организация кода
:::

## Полученные знания

**Освоены:**

::: incremental
- **Основы bash** — синтаксис, структура, выполнение
- **Переменные** — типы, операции, окружение
- **Управляющие конструкции** — условия, циклы
- **Функции** — создание, параметры, возврат
- **Отладка** — методы, инструменты, оптимизация
:::

# Заключение

## Выводы

::: incremental
- Освоены основы shell программирования
- Изучены переменные, условия, циклы и функции
- Практикована обработка аргументов
- Освоены методы отладки скриптов
- Получены навыки автоматизации задач
:::

## Практическое применение

::: incremental
- **Автоматизация** — рутинные операции
- **Системное администрирование** — управление системой
- **DevOps** — CI/CD, развертывание
- **Обработка данных** — парсинг, отчеты
- **Разработка инструментов** — утилиты CLI
:::

## Значимость навыков

Полученные навыки являются **фундаментальными** для:

::: incremental
- Эффективной работы в Linux
- Автоматизации задач
- Системного администрирования
- Разработки ПО
- DevOps практик
:::

## {.standout}

Спасибо за внимание!

Вопросы?
