---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05-24"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19

## Title
title: "Лабораторная работа №13"
subtitle: "Работа с shell скриптами"
license: "CC BY"
---

# Цель работы

Изучить основы программирования в оболочке ОС UNIX. Научиться писать более сложные командные файлы с использованием логических управляющих конструкций и циклов.

# Задание

1. Написать командный файл с использованием команд getopts и grep для анализа командной строки с ключами
2. Написать программу на языке Си для определения знака числа с передачей кода завершения в оболочку
3. Написать командный файл для создания и удаления пронумерованных файлов
4. Написать командный файл для архивации файлов с помощью команды tar


**Правила именования:**

- Начинается с буквы или подчеркивания
- Может содержать буквы, цифры, подчеркивания
- Регистрозависимые (`VAR` и `var` — разные переменные)
- Не использовать зарезервированные слова

**Примеры:**

```bash
name="John"
age=25
_temp="temporary"
USER_HOME="/home/user"
```

### Использование переменных

**Обращение к переменной:**

```bash
echo $variable          # простое обращение
echo ${variable}        # с фигурными скобками (рекомендуется)
echo "${variable}"      # в кавычках (сохраняет пробелы)
```

**Примеры:**

```bash
name="Alice"
echo "Hello, $name"           # Hello, Alice
echo "Hello, ${name}!"        # Hello, Alice!
echo "Path: ${HOME}/docs"     # Path: /home/user/docs
```

### Специальные переменные

**Параметры скрипта:**

- `$0` — имя скрипта
- `$1`, `$2`, ..., `$9` — позиционные параметры (аргументы)
- `${10}`, `${11}`, ... — параметры с номером > 9
- `$#` — количество аргументов
- `$@` — все аргументы как отдельные слова
- `$*` — все аргументы как одна строка
- `$?` — код возврата последней команды
- `$$` — PID текущего процесса
- `$!` — PID последнего фонового процесса

**Переменные окружения:**

- `$HOME` — домашняя директория пользователя
- `$USER` — имя пользователя
- `$PWD` — текущая директория
- `$OLDPWD` — предыдущая директория
- `$PATH` — пути поиска команд
- `$SHELL` — путь к текущей оболочке
- `$HOSTNAME` — имя хоста

**Примеры использования:**

```bash
#!/bin/bash

echo "Имя скрипта: $0"
echo "Первый аргумент: $1"
echo "Второй аргумент: $2"
echo "Количество аргументов: $#"
echo "Все аргументы: $@"
echo "Пользователь: $USER"
echo "Домашняя директория: $HOME"
```

### Операции с переменными

**Длина строки:**

```bash
string="Hello"
echo ${#string}         # 5
```

**Подстроки:**

```bash
string="Hello World"
echo ${string:0:5}      # Hello (с позиции 0, длина 5)
echo ${string:6}        # World (с позиции 6 до конца)
```

**Замена подстроки:**

```bash
string="Hello World"
echo ${string/World/Bash}    # Hello Bash (первое вхождение)
echo ${string//o/0}          # Hell0 W0rld (все вхождения)
```

**Значение по умолчанию:**

```bash
echo ${variable:-default}    # default если variable пустая
echo ${variable:=default}    # присвоить default если пустая
```

## Условные операторы

### Оператор if

**Синтаксис:**

```bash
if [ condition ]; then
    # команды если истина
elif [ condition2 ]; then
    # команды если condition2 истина
else
    # команды если все ложь
fi
```

**Примеры:**

```bash
if [ $age -gt 18 ]; then
    echo "Совершеннолетний"
else
    echo "Несовершеннолетний"
fi
```

### Операторы сравнения

**Числовые сравнения:**

- `-eq` — равно (equal)
- `-ne` — не равно (not equal)
- `-gt` — больше (greater than)
- `-ge` — больше или равно (greater or equal)
- `-lt` — меньше (less than)
- `-le` — меньше или равно (less or equal)

**Примеры:**

```bash
if [ $num -eq 10 ]; then
    echo "Число равно 10"
fi

if [ $age -ge 18 ]; then
    echo "Взрослый"
fi
```

**Строковые сравнения:**

- `=` или `==` — строки равны
- `!=` — строки не равны
- `<` — меньше (лексикографически)
- `>` — больше (лексикографически)
- `-z` — строка пустая (zero length)
- `-n` — строка не пустая (non-zero length)

**Примеры:**

```bash
if [ "$name" = "Alice" ]; then
    echo "Привет, Алиса!"
fi

if [ -z "$variable" ]; then
    echo "Переменная пустая"
fi

if [ -n "$variable" ]; then
    echo "Переменная не пустая"
fi
```

**Проверка файлов:**

- `-e` — файл существует (exists)
- `-f` — обычный файл (file)
- `-d` — директория (directory)
- `-r` — файл доступен для чтения (readable)
- `-w` — файл доступен для записи (writable)
- `-x` — файл исполняемый (executable)
- `-s` — файл не пустой (size > 0)
- `-L` — символическая ссылка (link)

**Примеры:**

```bash
if [ -f "/etc/passwd" ]; then
    echo "Файл существует"
fi

if [ -d "/home/user" ]; then
    echo "Директория существует"
fi

if [ -x "./script.sh" ]; then
    echo "Скрипт исполняемый"
fi
```

### Логические операторы

**Операторы:**

- `&&` — логическое И (AND)
- `||` — логическое ИЛИ (OR)
- `!` — логическое НЕ (NOT)

**Примеры:**

```bash
# И (AND)
if [ $age -ge 18 ] && [ $age -le 65 ]; then
    echo "Трудоспособный возраст"
fi

# ИЛИ (OR)
if [ "$name" = "Alice" ] || [ "$name" = "Bob" ]; then
    echo "Известное имя"
fi

# НЕ (NOT)
if [ ! -f "/tmp/file.txt" ]; then
    echo "Файл не существует"
fi
```

### Оператор case

**Синтаксис:**

```bash
case $variable in
    pattern1)
        # команды
        ;;
    pattern2)
        # команды
        ;;
    *)
        # команды по умолчанию
        ;;
esac
```

**Примеры:**

```bash
case $choice in
    1)
        echo "Выбрана опция 1"
        ;;
    2)
        echo "Выбрана опция 2"
        ;;
    [3-5])
        echo "Выбрана опция 3, 4 или 5"
        ;;
    *)
        echo "Неизвестная опция"
        ;;
esac
```

## Циклы

### Цикл for

**Синтаксис 1 (диапазон):**

```bash
for variable in list; do
    # команды
done
```

**Примеры:**

```bash
# Перебор чисел
for i in 1 2 3 4 5; do
    echo "Число: $i"
done

# Диапазон
for i in {1..10}; do
    echo $i
done

# С шагом
for i in {0..20..2}; do
    echo $i    # 0, 2, 4, ..., 20
done

# Перебор файлов
for file in *.txt; do
    echo "Обработка: $file"
done

# Перебор аргументов
for arg in "$@"; do
    echo "Аргумент: $arg"
done
```

**Синтаксис 2 (C-style):**

```bash
for ((i=0; i<10; i++)); do
    echo $i
done
```

### Цикл while

**Синтаксис:**

```bash
while [ condition ]; do
    # команды
done
```

**Примеры:**

```bash
# Счетчик
counter=1
while [ $counter -le 5 ]; do
    echo "Итерация: $counter"
    ((counter++))
done

# Чтение файла построчно
while IFS= read -r line; do
    echo "Строка: $line"
done < file.txt

# Бесконечный цикл
while true; do
    echo "Нажмите Ctrl+C для выхода"
    sleep 1
done
```

### Цикл until

**Синтаксис:**

```bash
until [ condition ]; do
    # команды
done
```

**Примеры:**

```bash
counter=1
until [ $counter -gt 5 ]; do
    echo "Счетчик: $counter"
    ((counter++))
done
```

### Управление циклами

**Команды:**

- `break` — выход из цикла
- `continue` — переход к следующей итерации

**Примеры:**

```bash
# break
for i in {1..10}; do
    if [ $i -eq 5 ]; then
        break    # выход при i=5
    fi
    echo $i
done

# continue
for i in {1..10}; do
    if [ $((i % 2)) -eq 0 ]; then
        continue    # пропустить четные
    fi
    echo $i
done
```

## Функции

### Объявление функций

**Синтаксис 1:**

```bash
function_name() {
    # команды
}
```

**Синтаксис 2:**

```bash
function function_name {
    # команды
}
```

**Примеры:**

```bash
# Простая функция
greet() {
    echo "Привет!"
}

# Вызов функции
greet

# Функция с параметрами
greet_user() {
    echo "Привет, $1!"
}

greet_user "Alice"    # Привет, Alice!
```

### Параметры функций

**Доступ к параметрам:**

- `$1`, `$2`, ... — позиционные параметры
- `$#` — количество параметров
- `$@` — все параметры
- `$*` — все параметры как одна строка

**Примеры:**

```bash
sum() {
    local result=$(($1 + $2))
    echo $result
}

result=$(sum 5 3)
echo "Сумма: $result"    # Сумма: 8
```

### Локальные переменные

**Использование local:**

```bash
my_function() {
    local local_var="локальная"
    global_var="глобальная"
    echo $local_var
}

my_function
echo $global_var    # доступна
echo $local_var     # не доступна (пустая)
```

### Возврат значений

**Команда return:**

```bash
is_even() {
    if [ $(($1 % 2)) -eq 0 ]; then
        return 0    # истина (четное)
    else
        return 1    # ложь (нечетное)
    fi
}

if is_even 4; then
    echo "Четное"
fi
```

**Вывод через echo:**

```bash
multiply() {
    echo $(($1 * $2))
}

result=$(multiply 6 7)
echo "Результат: $result"    # Результат: 42
```

## Работа с аргументами командной строки

### Обработка аргументов

**Примеры:**

```bash
#!/bin/bash

# Проверка количества аргументов
if [ $# -eq 0 ]; then
    echo "Использование: $0 <аргументы>"
    exit 1
fi

# Обработка всех аргументов
for arg in "$@"; do
    echo "Аргумент: $arg"
done

# Доступ к конкретным аргументам
echo "Первый аргумент: $1"
echo "Второй аргумент: $2"
```

### Команда getopts

**Обработка опций:**

```bash
#!/bin/bash

while getopts "a:b:c" opt; do
    case $opt in
        a)
            echo "Опция -a с значением: $OPTARG"
            ;;
        b)
            echo "Опция -b с значением: $OPTARG"
            ;;
        c)
            echo "Опция -c"
            ;;
        \?)
            echo "Неверная опция: -$OPTARG"
            exit 1
            ;;
    esac
done
```

## Отладка скриптов

### Опции отладки

**Команды:**

```bash
bash -x script.sh    # трассировка выполнения
bash -v script.sh    # вывод строк скрипта
bash -n script.sh    # проверка синтаксиса
```

**В скрипте:**

```bash
#!/bin/bash

set -x    # включить трассировку
# код
set +x    # выключить трассировку

set -e    # прервать при ошибке
set -u    # ошибка при использовании неопределенных переменных
set -o pipefail    # ошибка в конвейере
```

### Вывод отладочной информации

**Примеры:**

```bash
# Вывод значений переменных
echo "DEBUG: variable=$variable"

# Проверка условий
if [ condition ]; then
    echo "DEBUG: Условие истинно"
fi

# Трассировка функций
function_name() {
    echo "DEBUG: Вход в функцию с параметрами: $@"
    # код функции
    echo "DEBUG: Выход из функции"
}
```

## Создание и запуск скриптов

### Создание скрипта

**Шаги:**

1. Создать файл: `touch script.sh`
2. Добавить shebang: `#!/bin/bash`
3. Написать код
4. Сделать исполняемым: `chmod +x script.sh`
5. Запустить: `./script.sh`

**Пример:**

```bash
# Создание
cat > hello.sh << 'EOF'
#!/bin/bash
echo "Hello, World!"
EOF

# Права на выполнение
chmod +x hello.sh

# Запуск
./hello.sh
```

### Способы запуска

**Различные способы:**

```bash
./script.sh          # прямой запуск (требует chmod +x)
bash script.sh       # запуск через bash
sh script.sh         # запуск через sh
source script.sh     # выполнение в текущей оболочке
. script.sh          # то же что source
```

# Выполнение лабораторной работы

## Задание 1: Скрипт с getopts и grep

Создан скрипт `getopts_script.sh`, который анализирует командную строку с ключами и выполняет поиск в файле.

**Поддерживаемые ключи:**
- `-i<inputfile>` — прочитать данные из указанного файла
- `-o<outputfile>` — вывести данные в указанный файл
- `-p<шаблон>` — указать шаблон для поиска
- `-C` — различать большие и малые буквы
- `-n` — выдавать номера строк

Содержимое скрипта показано на рисунке @fig-content1.

![Скрипт getopts_script.sh](image/content1.png){#fig-content1 width=80%}

## Задание 2: Программа на языке Си

Создана программа `number_check.c`, которая определяет знак введенного числа и передает код завершения в оболочку.

**Коды завершения:**
- `0` — число равно нулю
- `1` — число больше нуля
- `2` — число меньше нуля

Содержимое программы показано на рисунке @fig-content2.

![Программа number_check.c](image/content2.png){#fig-content2 width=80%}

## Задание 3: Управление файлами

Создан скрипт `file_manager.sh` для создания и удаления пронумерованных файлов.

**Функциональность:**
- Создание указанного количества файлов (1.tmp, 2.tmp, ..., N.tmp)
- Удаление всех созданных файлов
- Использование опций командной строки `-n` и `-d`

Запуск скриптов показан на рисунке @fig-run1.

![Выполнение скриптов](image/run1.png){#fig-run1 width=80%}

## Задание 4: Архивация с tar

Создан скрипт `tar_script.sh` для архивации файлов с помощью команды tar.

**Возможности:**
- Архивация всех файлов в указанной директории
- Архивация только файлов, измененных менее недели назад (с использованием find)
- Создание архивов с временными метками

Результаты выполнения показаны на рисунке @fig-run2.

![Результаты архивации](image/run2.png){#fig-run2 width=80%}

# Выводы

В ходе выполнения лабораторной работы были получены практические навыки программирования в командной оболочке bash:

## Освоенные технологии

1. ✅ **Команда getopts**
   - Обработка опций командной строки
   - Работа с аргументами опций
   - Валидация входных параметров

2. ✅ **Интеграция C и shell**
   - Компиляция программ на C
   - Передача кодов завершения
   - Анализ результатов выполнения

3. ✅ **Управление файлами**
   - Создание пронумерованных файлов
   - Удаление файлов по шаблону
   - Работа с циклами и условиями

4. ✅ **Архивация данных**
   - Использование команды tar
   - Поиск файлов с помощью find
   - Фильтрация по времени модификации

## Практическое применение

Полученные навыки могут быть применены для:

- **Автоматизации задач** — создание скриптов для рутинных операций
- **Системного администрирования** — управление файлами и процессами
- **Обработки данных** — поиск и фильтрация информации
- **Интеграции программ** — связывание различных утилит

Все четыре скрипта успешно выполняют поставленные задачи и демонстрируют различные аспекты программирования в bash.

# Список литературы{.unnumbered}

- Advanced Bash-Scripting Guide: [https://tldp.org/LDP/abs/html/](https://tldp.org/LDP/abs/html/)
- Bash Reference Manual: [https://www.gnu.org/software/bash/manual/](https://www.gnu.org/software/bash/manual/)
- Linux Command Line and Shell Scripting Bible
