---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19

## Title
title: "Лабораторная работа №11"
subtitle: "Текстовой редактор Emacs"
license: "CC BY"
---

# Цель работы

Познакомиться с операционной системой Linux. Получить практические навыки работы с редактором Emacs.

# Задание

1. Ознакомиться с теоретическим материалом
2. Ознакомиться с редактором Emacs
3. Выполнить упражнения
4. Ответить на контрольные вопросы

# Теоретическое введение

## Редактор Emacs

**GNU Emacs** — мощный расширяемый текстовый редактор, созданный Ричардом Столлманом в 1985 году. Emacs является одним из самых популярных редакторов среди программистов и системных администраторов.

## Основные понятия

**Буфер** — область памяти, содержащая текст файла или другие данные для редактирования.

**Фрейм** — окно Emacs в оконной системе.

**Окно** — часть фрейма, отображающая буфер.

**Режим** — набор функций и настроек для работы с определенным типом файлов.

**Минибуфер** — специальная область внизу фрейма для ввода команд и сообщений.

## Обозначения клавиш

В документации Emacs используются следующие обозначения:

- **C-x** — означает Ctrl + x
- **M-x** — означает Alt + x (или Esc, затем x)
- **C-x C-f** — означает Ctrl+x, затем Ctrl+f
- **C-g** — отмена текущей команды

## Основные команды

**Работа с файлами:**

- \`C-x C-f\` — открыть или создать файл
- \`C-x C-s\` — сохранить файл
- \`C-x C-w\` — сохранить файл под другим именем
- \`C-x C-c\` — выйти из Emacs

**Редактирование:**

- \`C-k\` — вырезать строку от курсора до конца
- \`C-y\` — вставить последний вырезанный текст
- \`C-w\` — вырезать выделенную область
- \`M-w\` — скопировать выделенную область
- \`C-space\` — начать выделение области
- \`C-/\` или \`C-_\` — отменить последнее действие

**Перемещение курсора:**

- \`C-a\` — в начало строки
- \`C-e\` — в конец строки
- \`C-n\` — на строку вниз
- \`C-p\` — на строку вверх
- \`C-f\` — на символ вперед
- \`C-b\` — на символ назад
- \`M-<\` — в начало буфера
- \`M->\` — в конец буфера

**Управление буферами:**

- \`C-x C-b\` — показать список буферов
- \`C-x b\` — переключиться на другой буфер
- \`C-x k\` — закрыть буфер

**Управление окнами:**

- \`C-x 2\` — разделить окно по горизонтали
- \`C-x 3\` — разделить окно по вертикали
- \`C-x o\` — переключиться в другое окно
- \`C-x 0\` — закрыть текущее окно
- \`C-x 1\` — оставить только текущее окно

**Поиск и замена:**

- \`C-s\` — инкрементальный поиск вперед
- \`C-r\` — инкрементальный поиск назад
- \`M-%\` — поиск и замена
- \`M-s o\` — режим occur (показать все строки с совпадениями)

# Выполнение лабораторной работы

## Основные команды Emacs

### Открытие Emacs

Запущен редактор Emacs:

\`\`\`bash
emacs
\`\`\`

### Создание файла lab07.sh

Для создания нового файла использована комбинация клавиш \`C-x C-f\`:

1. Нажата комбинация \`C-x C-f\`
2. В минибуфере введено имя файла: \`lab07.sh\`
3. Нажата клавиша \`Enter\`

### Ввод текста

В открытом буфере набран следующий текст:

\`\`\`bash
#!/bin/bash
HELL=Hello
function hello {
LOCAL HELLO=World
echo $HELLO
}
echo $HELLO
hello
\`\`\`

Процесс создания файла показан на рисунке @fig-code.

![Создание файла lab07.sh в Emacs](image/code.png){#fig-code width=80%}

### Сохранение файла

Файл сохранен с помощью комбинации \`C-x C-s\`:

1. Нажата комбинация \`C-x C-s\`
2. В минибуфере появилось сообщение о сохранении файла

## Стандартные процедуры редактирования

### Вырезать и вставить строку

Выполнены следующие действия:

1. Установлен курсор на строку \`echo $HELLO\`
2. Нажата комбинация \`C-k\` для вырезания строки
3. Курсор перемещен в конец файла с помощью \`M->\`
4. Нажата комбинация \`C-y\` для вставки строки

### Выделение области текста

Выполнены следующие действия:

1. Установлен курсор в начало области (начало функции hello)
2. Нажата комбинация \`C-space\` для начала выделения
3. Курсор перемещен в конец области (конец функции hello)
4. Область выделена

Процесс выделения показан на рисунке @fig-mark.

![Выделение области текста](image/mark.png){#fig-mark width=80%}

### Копирование области

Выполнены следующие действия:

1. С выделенной областью нажата комбинация \`M-w\` для копирования
2. Курсор перемещен в конец файла
3. Нажата комбинация \`C-y\` для вставки скопированной области

Процесс копирования показан на рисунке @fig-copy.

![Копирование области текста](image/copy.png){#fig-copy width=80%}

### Вырезание области

Выполнены следующие действия:

1. Вновь выделена та же область с помощью \`C-space\`
2. Нажата комбинация \`C-w\` для вырезания области
3. Нажата комбинация \`C-/\` для отмены последнего действия

## Команды перемещения курсора

Практикованы следующие команды:

1. **\`C-a\`** — курсор перемещен в начало строки
2. **\`C-e\`** — курсор перемещен в конец строки
3. **\`M-<\`** — курсор перемещен в начало буфера
4. **\`M->\`** — курсор перемещен в конец буфера

## Управление буферами

### Список буферов

Выполнены следующие действия:

1. Нажата комбинация \`C-x C-b\` для вывода списка активных буферов
2. Открылось новое окно со списком буферов

Список буферов показан на рисунке @fig-buffer.

![Список активных буферов](image/buffer.png){#fig-buffer width=80%}

### Переключение между буферами

Выполнены следующие действия:

1. Нажата комбинация \`C-x o\` для переключения в окно со списком буферов
2. Выбран другой буфер
3. Нажата комбинация \`C-x 0\` для закрытия окна со списком

Процесс переключения показан на рисунке @fig-switching.

![Переключение между буферами](image/switching buffers.png){#fig-switching width=80%}

### Переключение без списка

Выполнены следующие действия:

1. Нажата комбинация \`C-x b\`
2. В минибуфере введено имя буфера
3. Нажата клавиша \`Enter\`
4. Произошло переключение на указанный буфер

## Управление окнами

### Разделение фрейма на 4 части

Выполнены следующие действия:

1. Нажата комбинация \`C-x 3\` для разделения фрейма по вертикали на два окна
2. Нажата комбинация \`C-x 2\` для разделения левого окна по горизонтали
3. Нажата комбинация \`C-x o\` для переключения в правое окно
4. Нажата комбинация \`C-x 2\` для разделения правого окна по горизонтали

Результат показан на рисунке @fig-multitasking.

![Фрейм разделенный на 4 окна](image/multitasking.png){#fig-multitasking width=80%}

### Открытие файлов в окнах

В каждом из четырех окон:

1. Нажата комбинация \`C-x C-f\`
2. Введено имя нового файла
3. Введено несколько строк текста

## Режим поиска

### Инкрементальный поиск

Выполнены следующие действия:

1. Нажата комбинация \`C-s\` для начала поиска
2. Введено слово для поиска (например, "HELLO")
3. Нажата комбинация \`C-s\` несколько раз для перехода между результатами
4. Нажата комбинация \`C-g\` для выхода из режима поиска

Процесс поиска показан на рисунке @fig-find.

![Режим поиска в Emacs](image/find.png){#fig-find width=80%}

Подсветка результатов показана на рисунке @fig-highlight.

![Подсветка найденного текста](image/highlight.png){#fig-highlight width=80%}

### Поиск и замена

Выполнены следующие действия:

1. Нажата комбинация \`M-%\` для режима поиска и замены
2. Введен текст для поиска: "HELL"
3. Нажата клавиша \`Enter\`
4. Введен текст для замены: "HELLO"
5. Нажата клавиша \`Enter\`
6. Нажата клавиша \`!\` для замены всех вхождений

### Режим Occur

Выполнены следующие действия:

1. Нажата комбинация \`M-s o\`
2. Введено слово для поиска
3. Открылось новое окно со всеми строками, содержащими искомое слово

**Отличие от обычного режима поиска:**

Режим occur (\`M-s o\`) отличается от обычного инкрементального поиска (\`C-s\`) тем, что:

- Показывает все строки с совпадениями в отдельном буфере
- Позволяет видеть контекст всех совпадений одновременно
- Можно переходить к любому результату, кликнув на него
- Удобен для анализа всех вхождений слова в файле

# Выводы

В ходе выполнения лабораторной работы были получены практические навыки работы с текстовым редактором Emacs:

1. ✅ **Освоены основные команды Emacs**
   - Создание и сохранение файлов (\`C-x C-f\`, \`C-x C-s\`)
   - Выход из редактора (\`C-x C-c\`)
   - Отмена команд (\`C-g\`)

2. ✅ **Изучены команды редактирования**
   - Вырезание строк и областей (\`C-k\`, \`C-w\`)
   - Копирование областей (\`M-w\`)
   - Вставка текста (\`C-y\`)
   - Выделение областей (\`C-space\`)
   - Отмена действий (\`C-/\`)

3. ✅ **Практикованы команды перемещения**
   - Перемещение по строке (\`C-a\`, \`C-e\`)
   - Перемещение по буферу (\`M-<\`, \`M->\`)
   - Перемещение по символам и строкам

4. ✅ **Освоена работа с буферами**
   - Просмотр списка буферов (\`C-x C-b\`)
   - Переключение между буферами (\`C-x b\`, \`C-x o\`)
   - Закрытие буферов (\`C-x k\`)

5. ✅ **Изучено управление окнами**
   - Разделение окон (\`C-x 2\`, \`C-x 3\`)
   - Переключение между окнами (\`C-x o\`)
   - Закрытие окон (\`C-x 0\`, \`C-x 1\`)

6. ✅ **Освоены режимы поиска**
   - Инкрементальный поиск (\`C-s\`)
   - Поиск и замена (\`M-%\`)
   - Режим occur (\`M-s o\`)

**Полученные навыки:**

Редактор Emacs является мощным инструментом для работы с текстовыми файлами и программным кодом. Знание Emacs необходимо для:

- Эффективного редактирования программного кода
- Работы с множеством файлов одновременно
- Быстрой навигации по большим файлам
- Автоматизации рутинных задач редактирования
- Работы в терминале без графического интерфейса

Освоенные команды Emacs позволяют значительно повысить производительность при работе с текстом и кодом в Linux.

# Контрольные вопросы

1. **Кратко охарактеризуйте редактор Emacs.**

   Emacs — мощный расширяемый текстовый редактор, созданный Ричардом Столлманом. Поддерживает множество режимов редактирования, расширяется с помощью Emacs Lisp, имеет встроенную справочную систему.

2. **Какие особенности данного редактора могут сделать его сложным для освоения новичком?**

   - Большое количество комбинаций клавиш
   - Специфическая терминология (буфер, фрейм, окно)
   - Необычные обозначения клавиш (C-, M-)
   - Множество режимов и функций

3. **Что такое буфер и окно в терминологии Emacs?**

   Буфер — область памяти для редактирования текста. Окно — часть фрейма, отображающая буфер.

4. **Можно ли открыть больше 10 буферов в одной сессии Emacs?**

   Да, количество буферов ограничено только доступной памятью.

5. **Какие буферы создаются по умолчанию при запуске Emacs?**

   \`*scratch*\`, \`*Messages*\`, \`*GNU Emacs*\`.

6. **Какие клавиши вы нажмёте, чтобы ввести следующую комбинацию: C-c | и C-c C-|?**

   C-c | : Ctrl+c, затем |
   C-c C-| : Ctrl+c, затем Ctrl+|

7. **Как поделить текущее окно на две части?**

   \`C-x 2\` — по горизонтали, \`C-x 3\` — по вертикали.

8. **В каком файле хранятся настройки Emacs?**

   В файле \`~/.emacs\` или \`~/.emacs.d/init.el\`.

9. **Какую функцию выполняет клавиша Backspace и можно ли её переназначить?**

   Удаляет символ перед курсором. Можно переназначить через настройки.

10. **Какой редактор вам показался удобнее в работе: vi или Emacs?**

    Emacs показался удобнее благодаря более интуитивным командам и возможности работы с несколькими окнами одновременно.

# Список литературы{.unnumbered}

- GNU Emacs Manual: [https://www.gnu.org/software/emacs/manual/](https://www.gnu.org/software/emacs/manual/)
- Emacs Tutorial: [https://www.gnu.org/software/emacs/tour/](https://www.gnu.org/software/emacs/tour/)
- Emacs Wiki: [https://www.emacswiki.org/](https://www.emacswiki.org/)
- Learning GNU Emacs: [https://www.oreilly.com/library/view/learning-gnu-emacs/0596006489/](https://www.oreilly.com/library/view/learning-gnu-emacs/0596006489/)
