---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05-24"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19

## Title
title: "Лабораторная работа №11"
subtitle: "Работа с текстовым редактором Emacs"
license: "CC BY"
---

# Цель работы

Изучить основы работы с мощным текстовым редактором Emacs, освоить систему буферов, навигацию по тексту и основные режимы редактирования.

# Задание

1. Освоить запуск и базовую навигацию в Emacs
2. Научиться работать с системой буферов
3. Изучить основные режимы редактирования
4. Практиковать поиск и замену текста
5. Освоить многозадачность и управление окнами

# Теоретическое введение

## Что такое Emacs?

**GNU Emacs** — мощный, расширяемый, настраиваемый текстовый редактор и интегрированная среда разработки.

**История:**

- Создан Ричардом Столлманом (Richard Stallman) в 1976 году
- Название: **E**ditor **MAC**ro**S** (редактор макросов)
- Написан на Emacs Lisp (диалект языка Lisp)
- Философия: "Emacs — это не просто редактор, это образ жизни"

**Основные особенности:**

- **Расширяемость** — можно программировать на Emacs Lisp
- **Настраиваемость** — полная кастомизация интерфейса и поведения
- **Самодокументируемость** — встроенная справка по всем функциям
- **Многозадачность** — работа с множеством файлов одновременно
- **Интеграция** — email, IRC, git, компиляция, отладка

## Основные концепции Emacs

### Буферы (Buffers)

**Буфер** — временная область памяти для редактирования текста.

- Каждый открытый файл находится в своем буфере
- Буферы могут не быть связаны с файлами (например, *scratch*)
- Можно переключаться между буферами
- Буферы сохраняются в памяти до закрытия Emacs

**Специальные буферы:**

- `*scratch*` — буфер для заметок и экспериментов с Lisp
- `*Messages*` — журнал сообщений Emacs
- `*Help*` — буфер справки
- `*Completions*` — буфер автодополнения

### Окна (Windows)

**Окно** — область экрана, отображающая буфер.

- Можно разделить экран на несколько окон
- Каждое окно показывает один буфер
- Окна можно создавать, удалять, изменять размер
- Не путать с окнами операционной системы!

### Фреймы (Frames)

**Фрейм** — окно операционной системы с Emacs.

- Можно создавать несколько фреймов
- Каждый фрейм может содержать несколько окон
- Фреймы независимы друг от друга

### Режимы (Modes)

**Режим** — набор функций и настроек для определенного типа редактирования.

**Основные режимы (Major Modes):**

- `text-mode` — редактирование обычного текста
- `python-mode` — редактирование Python кода
- `c-mode` — редактирование C кода
- `org-mode` — организация заметок и задач
- `markdown-mode` — редактирование Markdown

**Дополнительные режимы (Minor Modes):**

- `auto-fill-mode` — автоматический перенос строк
- `line-number-mode` — отображение номеров строк
- `flyspell-mode` — проверка орфографии
- `hl-line-mode` — подсветка текущей строки

### Мини-буфер (Minibuffer)

**Мини-буфер** — область внизу экрана для ввода команд и аргументов.

- Используется для ввода имен файлов
- Ввод команд через `M-x`
- Поиск и замена текста
- Автодополнение с помощью Tab

### Область эха (Echo Area)

**Область эха** — строка внизу экрана для вывода сообщений.

- Отображает результаты команд
- Показывает подсказки по клавишам
- Выводит сообщения об ошибках

## Обозначения клавиш в Emacs

**Специальные обозначения:**

- **C-** — клавиша Control (Ctrl)
- **M-** — клавиша Meta (обычно Alt или Esc)
- **S-** — клавиша Shift
- **RET** — клавиша Enter
- **SPC** — клавиша Space (пробел)
- **DEL** — клавиша Backspace
- **TAB** — клавиша Tab

**Примеры:**

- `C-x` — нажать Ctrl+x
- `M-x` — нажать Alt+x (или Esc, затем x)
- `C-x C-f` — нажать Ctrl+x, затем Ctrl+f
- `C-x 2` — нажать Ctrl+x, затем 2 (без Ctrl)

## Основные команды Emacs

### Запуск и выход

```bash
# Запуск Emacs
emacs

# Запуск в терминале (без GUI)
emacs -nw

# Открыть файл сразу
emacs filename.txt

# Выход из Emacs
C-x C-c
```

### Работа с файлами

**Открытие и сохранение:**

- `C-x C-f` — открыть файл (find-file)
- `C-x C-s` — сохранить файл (save-buffer)
- `C-x C-w` — сохранить как (write-file)
- `C-x s` — сохранить все буферы
- `C-x C-v` — открыть другой файл вместо текущего

**Вставка файлов:**

- `C-x i` — вставить содержимое файла в текущую позицию

### Навигация по тексту

**Перемещение курсора:**

- `C-f` — вперед на один символ (forward-char)
- `C-b` — назад на один символ (backward-char)
- `C-n` — вниз на одну строку (next-line)
- `C-p` — вверх на одну строку (previous-line)
- `C-a` — в начало строки
- `C-e` — в конец строки
- `M-f` — вперед на одно слово
- `M-b` — назад на одно слово
- `M-a` — в начало предложения
- `M-e` — в конец предложения

**Перемещение по экрану:**

- `C-v` — страница вниз (scroll-up)
- `M-v` — страница вверх (scroll-down)
- `M-<` — в начало буфера
- `M->` — в конец буфера
- `C-l` — центрировать экран на курсоре

**Переход к строке:**

- `M-g g` — перейти к строке по номеру (goto-line)

### Редактирование текста

**Удаление:**

- `DEL` — удалить символ перед курсором
- `C-d` — удалить символ после курсора
- `M-DEL` — удалить слово перед курсором
- `M-d` — удалить слово после курсора
- `C-k` — удалить от курсора до конца строки (kill-line)
- `M-k` — удалить предложение

**Отмена и повтор:**

- `C-/` или `C-_` — отменить последнее действие (undo)
- `C-g C-/` — повторить отмененное действие (redo)

**Копирование и вставка:**

- `C-SPC` — установить метку (начало выделения)
- `C-w` — вырезать выделенный текст (kill-region)
- `M-w` — копировать выделенный текст (copy-region-as-kill)
- `C-y` — вставить (yank)
- `M-y` — вставить предыдущий элемент из истории (после C-y)

**Транспозиция:**

- `C-t` — поменять местами два символа
- `M-t` — поменять местами два слова

### Поиск и замена

**Инкрементальный поиск:**

- `C-s` — поиск вперед (isearch-forward)
- `C-r` — поиск назад (isearch-backward)
- `C-s C-s` — повторить последний поиск
- `C-g` — отменить поиск

**Поиск и замена:**

- `M-%` — поиск и замена (query-replace)
  - `y` — заменить
  - `n` — пропустить
  - `!` — заменить все оставшиеся
  - `q` — выйти

**Поиск по регулярным выражениям:**

- `C-M-s` — поиск по regexp вперед
- `C-M-r` — поиск по regexp назад
- `C-M-%` — замена по regexp

### Работа с буферами

**Управление буферами:**

- `C-x b` — переключиться на другой буфер (switch-to-buffer)
- `C-x C-b` — список всех буферов (list-buffers)
- `C-x k` — закрыть буфер (kill-buffer)
- `C-x left` — предыдущий буфер
- `C-x right` — следующий буфер

### Работа с окнами

**Разделение окон:**

- `C-x 2` — разделить окно горизонтально (split-window-below)
- `C-x 3` — разделить окно вертикально (split-window-right)
- `C-x 1` — оставить только текущее окно (delete-other-windows)
- `C-x 0` — закрыть текущее окно (delete-window)

**Переключение между окнами:**

- `C-x o` — переключиться на другое окно (other-window)
- `C-M-v` — прокрутить другое окно

**Изменение размера:**

- `C-x ^` — увеличить высоту окна
- `C-x {` — уменьшить ширину окна
- `C-x }` — увеличить ширину окна

### Работа с метками

**Метки (Marks):**

- `C-SPC` — установить метку
- `C-x C-x` — обменять позиции курсора и метки
- `C-u C-SPC` — вернуться к предыдущей метке

**Кольцо меток:**

- Emacs сохраняет историю меток
- `C-u C-SPC` — перемещение по истории меток

### Выполнение команд

**Команды через мини-буфер:**

- `M-x` — выполнить команду по имени
- `M-x command-name` — выполнить команду

**Примеры:**

```
M-x replace-string    # замена строки
M-x goto-line         # переход к строке
M-x shell             # запуск shell
M-x calendar          # календарь
```

### Справка и документация

**Система справки:**

- `C-h ?` — справка о справке
- `C-h k` — справка по клавише
- `C-h f` — справка по функции
- `C-h v` — справка по переменной
- `C-h m` — справка по текущему режиму
- `C-h t` — встроенный учебник (tutorial)
- `C-h i` — Info документация

### Отмена команд

**Прерывание:**

- `C-g` — отменить текущую команду (keyboard-quit)
- `C-g C-g C-g` — экстренная отмена

## Дополнительные возможности

### Прямоугольное выделение

**Работа с прямоугольниками:**

- `C-x r k` — вырезать прямоугольник
- `C-x r y` — вставить прямоугольник
- `C-x r o` — вставить пустой прямоугольник
- `C-x r c` — очистить прямоугольник
- `C-x r t` — заменить прямоугольник текстом

### Макросы

**Запись и воспроизведение:**

- `C-x (` — начать запись макроса
- `C-x )` — закончить запись макроса
- `C-x e` — выполнить макрос
- `C-u 10 C-x e` — выполнить макрос 10 раз

### Закладки

**Работа с закладками:**

- `C-x r m` — установить закладку
- `C-x r b` — перейти к закладке
- `C-x r l` — список закладок

### Регистры

**Сохранение в регистры:**

- `C-x r s R` — сохранить регион в регистр R
- `C-x r i R` — вставить содержимое регистра R
- `C-x r SPC R` — сохранить позицию в регистр R
- `C-x r j R` — перейти к позиции из регистра R

# Выполнение лабораторной работы

## Запуск Emacs

Emacs был запущен из командной строки:

```bash
# Запуск Emacs с графическим интерфейсом
emacs

# Или в терминале
emacs -nw
```

Основной интерфейс Emacs показан на рисунке @fig-emacs.

![Интерфейс редактора Emacs](image/emacs.png){#fig-emacs width=80%}

**Элементы интерфейса:**

- **Строка меню** — File, Edit, Options, Buffers, Tools, Help
- **Панель инструментов** — кнопки быстрого доступа
- **Область редактирования** — основная рабочая область
- **Строка режима** — информация о буфере, режиме, позиции курсора
- **Мини-буфер** — область для ввода команд внизу экрана

## Открытие и создание файлов

Было освоено открытие файлов:

```
C-x C-f    # открыть файл (find-file)
```

**Процесс:**

1. Нажать `C-x C-f`
2. В мини-буфере ввести имя файла
3. Нажать `RET` (Enter)
4. Если файл не существует, создается новый буфер

**Автодополнение:**

- `TAB` — автодополнение имени файла
- `TAB TAB` — показать все варианты

## Редактирование текста

Был создан и отредактирован текстовый файл:

```
# Навигация
C-f, C-b, C-n, C-p    # перемещение по символам и строкам
M-f, M-b              # перемещение по словам
C-a, C-e              # начало/конец строки

# Удаление
DEL                   # удалить символ перед курсором
C-d                   # удалить символ после курсора
C-k                   # удалить до конца строки
```

Процесс редактирования кода показан на рисунке @fig-code.

![Редактирование программного кода](image/code.png){#fig-code width=80%}

## Работа с буферами

Была освоена система буферов Emacs:

```
C-x b         # переключиться на другой буфер
C-x C-b       # список всех буферов
C-x k         # закрыть буфер
C-x left      # предыдущий буфер
C-x right     # следующий буфер
```

**Практика:**

1. Открыто несколько файлов
2. Создано несколько буферов
3. Выполнено переключение между буферами
4. Использован список буферов для навигации

Работа с буферами показана на рисунке @fig-buffer.

![Управление буферами в Emacs](image/buffer.png){#fig-buffer width=80%}

## Переключение между буферами

Было практиковано быстрое переключение:

```
C-x b buffer-name    # переключиться на буфер по имени
C-x b RET            # переключиться на предыдущий буфер
```

**Автодополнение имен буферов:**

- Ввести первые буквы имени буфера
- Нажать `TAB` для автодополнения
- Нажать `TAB TAB` для списка вариантов

Процесс переключения показан на рисунке @fig-switching-buffers.

![Переключение между буферами](image/switching buffers.png){#fig-switching-buffers width=80%}

## Копирование и вставка текста

Были освоены операции с текстом:

```
C-SPC         # установить метку (начало выделения)
C-w           # вырезать выделенный текст
M-w           # копировать выделенный текст
C-y           # вставить текст
M-y           # вставить предыдущий элемент (после C-y)
```

**Процесс копирования:**

1. Установить метку в начале текста (`C-SPC`)
2. Переместить курсор в конец нужного текста
3. Копировать (`M-w`) или вырезать (`C-w`)
4. Переместить курсор в место вставки
5. Вставить (`C-y`)

Операции копирования показаны на рисунке @fig-copy.

![Копирование и вставка текста](image/copy.png){#fig-copy width=80%}

## Работа с метками

Было освоено использование меток:

```
C-SPC         # установить метку
C-x C-x       # обменять позиции курсора и метки
C-u C-SPC     # вернуться к предыдущей метке
```

**Кольцо меток:**

- Emacs сохраняет историю установленных меток
- Можно перемещаться по истории с помощью `C-u C-SPC`
- Полезно для возврата к предыдущим позициям редактирования

Работа с метками показана на рисунке @fig-mark.

![Использование меток для выделения](image/mark.png){#fig-mark width=80%}

## Поиск в тексте

Был освоен инкрементальный поиск:

```
C-s           # поиск вперед
C-r           # поиск назад
C-s C-s       # повторить последний поиск
C-g           # отменить поиск
```

**Процесс поиска:**

1. Нажать `C-s`
2. Начать вводить искомый текст
3. Emacs сразу находит первое совпадение
4. Нажать `C-s` снова для следующего совпадения
5. Нажать `RET` для завершения поиска

Поиск в тексте показан на рисунке @fig-find.

![Инкрементальный поиск текста](image/find.png){#fig-find width=80%}

## Поиск и замена

Была освоена замена текста:

```
M-%           # поиск и замена (query-replace)
```

**Интерактивная замена:**

1. Нажать `M-%`
2. Ввести искомую строку, нажать `RET`
3. Ввести строку замены, нажать `RET`
4. Для каждого совпадения:
   - `y` — заменить
   - `n` — пропустить
   - `!` — заменить все оставшиеся
   - `q` — выйти

**Замена по регулярным выражениям:**

```
C-M-%         # замена по regexp
```

## Подсветка синтаксиса

Была изучена подсветка синтаксиса для различных языков:

**Автоматическое определение режима:**

- Emacs автоматически определяет тип файла по расширению
- `.py` → python-mode
- `.c` → c-mode
- `.js` → javascript-mode
- `.md` → markdown-mode

**Возможности подсветки:**

- Ключевые слова языка
- Строки и комментарии
- Функции и переменные
- Синтаксические ошибки

Подсветка синтаксиса показана на рисунке @fig-highlight.

![Подсветка синтаксиса программного кода](image/highlight.png){#fig-highlight width=80%}

## Разделение окон

Была освоена работа с несколькими окнами:

```
C-x 2         # разделить окно горизонтально
C-x 3         # разделить окно вертикально
C-x o         # переключиться на другое окно
C-x 1         # оставить только текущее окно
C-x 0         # закрыть текущее окно
```

**Практика многозадачности:**

1. Открыто несколько файлов
2. Экран разделен на несколько окон
3. В каждом окне отображен свой буфер
4. Выполнено переключение между окнами

Многозадачная работа показана на рисунке @fig-multitasking.

![Работа с несколькими окнами](image/multitasking.png){#fig-multitasking width=80%}

## История команд

Была изучена история выполненных команд:

```
M-x list-command-history    # показать историю команд
```

**Повтор команд:**

- `C-x ESC ESC` — повторить последнюю сложную команду
- `M-p` — предыдущая команда в мини-буфере
- `M-n` — следующая команда в мини-буфере

История команд показана на рисунке @fig-history.

![История выполненных команд](image/history.png){#fig-history width=80%}

## Работа с тегами

Была изучена система тегов для навигации по коду:

```
M-x visit-tags-table    # загрузить файл тегов
M-.                     # перейти к определению
M-*                     # вернуться назад
```

**Создание файла тегов:**

```bash
# Для C/C++
etags *.c *.h

# Для Python
etags *.py

# Для нескольких языков
find . -name "*.c" -o -name "*.h" | etags -
```

**Использование тегов:**

1. Создать файл TAGS в корне проекта
2. Загрузить таблицу тегов в Emacs
3. Поставить курсор на имя функции
4. Нажать `M-.` для перехода к определению
5. Нажать `M-*` для возврата

Работа с тегами показана на рисунке @fig-tags.

![Навигация по коду с помощью тегов](image/tags.png){#fig-tags width=80%}

## Сохранение файлов

Были освоены различные способы сохранения:

```
C-x C-s       # сохранить текущий буфер
C-x s         # сохранить все измененные буферы
C-x C-w       # сохранить как (с новым именем)
```

**Автосохранение:**

- Emacs автоматически сохраняет файлы в `#filename#`
- При сбое можно восстановить из автосохранения
- `M-x recover-file` — восстановить файл

## Выход из Emacs

Завершение работы:

```
C-x C-c       # выйти из Emacs
```

**Если есть несохраненные изменения:**

- Emacs спросит о сохранении каждого буфера
- `y` — сохранить
- `n` — не сохранять
- `!` — сохранить все
- `q` — отменить выход

## Использование справки

Была освоена система справки:

```
C-h ?         # справка о справке
C-h k         # справка по клавише
C-h f         # справка по функции
C-h v         # справка по переменной
C-h m         # справка по текущему режиму
C-h t         # встроенный учебник
```

**Примеры:**

1. `C-h k C-x C-f` — узнать, что делает `C-x C-f`
2. `C-h f save-buffer` — справка по функции save-buffer
3. `C-h m` — узнать о текущем режиме редактирования

# Выводы

В ходе лабораторной работы были успешно выполнены следующие задачи:

1. ✅ **Освоен запуск и базовая навигация в Emacs**
   - Изучен запуск Emacs в графическом режиме и в терминале
   - Освоены основные элементы интерфейса (меню, панель инструментов, строка режима, мини-буфер)
   - Практикована навигация по тексту с помощью клавиш `C-f`, `C-b`, `C-n`, `C-p`, `C-a`, `C-e`
   - Изучено перемещение по словам (`M-f`, `M-b`) и страницам (`C-v`, `M-v`)

2. ✅ **Изучена работа с системой буферов**
   - Освоено понятие буфера как временной области для редактирования
   - Практиковано переключение между буферами (`C-x b`)
   - Изучен список буферов (`C-x C-b`) и закрытие буферов (`C-x k`)
   - Освоена навигация по истории буферов (`C-x left`, `C-x right`)

3. ✅ **Освоены основные режимы редактирования**
   - Изучены основные режимы (Major Modes) для различных типов файлов
   - Практикована подсветка синтаксиса для программного кода
   - Освоены дополнительные режимы (Minor Modes) для расширения функциональности
   - Изучена автоматическая активация режимов по расширению файла

4. ✅ **Практикован поиск и замена текста**
   - Освоен инкрементальный поиск вперед (`C-s`) и назад (`C-r`)
   - Изучена интерактивная замена текста (`M-%`)
   - Практикован поиск по регулярным выражениям (`C-M-s`, `C-M-%`)
   - Освоены операции копирования (`M-w`), вырезания (`C-w`) и вставки (`C-y`)

5. ✅ **Изучена многозадачность и управление окнами**
   - Освоено разделение окон горизонтально (`C-x 2`) и вертикально (`C-x 3`)
   - Практиковано переключение между окнами (`C-x o`)
   - Изучено управление окнами (закрытие, изменение размера)
   - Освоена работа с несколькими файлами одновременно

**Дополнительные навыки:**

- ✅ Работа с метками для выделения текста (`C-SPC`, `C-x C-x`)
- ✅ Использование системы тегов для навигации по коду (`M-.`, `M-*`)
- ✅ Работа с историей команд и повтор операций
- ✅ Использование системы справки (`C-h k`, `C-h f`, `C-h m`)
- ✅ Открытие (`C-x C-f`) и сохранение (`C-x C-s`) файлов
- ✅ Отмена операций (`C-/`) и прерывание команд (`C-g`)

**Полученные знания:**

Получены глубокие навыки работы с мощным текстовым редактором GNU Emacs, который является не просто редактором, а полноценной интегрированной средой разработки. Освоены:

- **Философия Emacs** — расширяемость, настраиваемость, самодокументируемость
- **Система буферов** — эффективная работа с множеством файлов
- **Клавиатурные сокращения** — быстрое выполнение операций без использования мыши
- **Режимы редактирования** — специализированные функции для разных типов файлов
- **Многозадачность** — одновременная работа с несколькими файлами и окнами

**Практическое применение:**

Навыки работы с Emacs применимы в следующих областях:

- **Программирование** — редактирование кода на различных языках с подсветкой синтаксиса
- **Системное администрирование** — редактирование конфигурационных файлов
- **Написание документации** — работа с текстовыми файлами, Markdown, LaTeX
- **Разработка** — интеграция с системами контроля версий, компиляторами, отладчиками
- **Автоматизация** — создание макросов и скриптов на Emacs Lisp

Emacs является одним из самых мощных инструментов для работы с текстом и кодом в Unix/Linux системах, и освоение его основ открывает путь к значительному повышению производительности работы.

# Список литературы{.unnumbered}

::: {#refs}
- GNU Emacs Manual: [https://www.gnu.org/software/emacs/manual/](https://www.gnu.org/software/emacs/manual/)
- Emacs Tutorial: [https://www.gnu.org/software/emacs/tour/](https://www.gnu.org/software/emacs/tour/)
- Learning GNU Emacs, 3rd Edition: [https://www.oreilly.com/library/view/learning-gnu-emacs/0596006489/](https://www.oreilly.com/library/view/learning-gnu-emacs/0596006489/)
- Emacs Wiki: [https://www.emacswiki.org/](https://www.emacswiki.org/)
- Mastering Emacs: [https://www.masteringemacs.org/](https://www.masteringemacs.org/)
- Emacs Reference Card: [https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf](https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf)
- Emacs Lisp Introduction: [https://www.gnu.org/software/emacs/manual/html_node/eintr/](https://www.gnu.org/software/emacs/manual/html_node/eintr/)
- Practical Emacs Tutorial: [http://ergoemacs.org/emacs/emacs.html](http://ergoemacs.org/emacs/emacs.html)
:::
