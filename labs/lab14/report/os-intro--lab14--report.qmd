---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05-24"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19

## Title
title: "Лабораторная работа №14"
subtitle: "Реализация продвинутых механизмов в shell"
license: "CC BY"
---

# Цель работы

Изучить продвинутые концепции программирования в Linux, реализовав упрощённый механизм семафоров, команду man и генератор случайных последовательностей с использованием shell скриптов.

# Задание

1. Написать командный файл, реализующий упрощённый механизм семафоров. Командный файл должен в течение некоторого времени t1 дожидаться освобождения ресурса, выдавая об этом сообщение, а дождавшись его освобождения, использовать его в течение некоторого времени t2<>t1, также выдавая информацию о том, что ресурс используется соответствующим командным файлом (процессом). Запустить командный файл в одном виртуальном терминале в фоновом режиме, перенаправив его вывод в другой (> /dev/tty#, где # — номер терминала куда перенаправляется вывод), в котором также запущен этот файл, но не фоновом, а в привилегированном режиме. Доработать программу так, чтобы имелась возможность взаимодействия трёх и более процессов.

2. Реализовать команду man с помощью командного файла. Изучите содержимое каталога /usr/share/man/man1. В нем находятся архивы текстовых файлов, содержащих справку по большинству установленных в системе программ и команд. Каждый архив можно открыть командой less сразу же просмотрев содержимое справки. Командный файл должен получать в виде аргумента командной строки название команды и в виде результата выдавать справку об этой команде или сообщение об отсутствии справки, если соответствующего файла нет в каталоге man1.

3. Используя встроенную переменную $RANDOM, напишите командный файл, генерирующий случайную последовательность букв латинского алфавита. Учтите, что $RANDOM выдаёт псевдослучайные числа в диапазоне от 0 до 32767.

# Теоретическое введение

## Семафоры

Семафор - это переменная, которая используется для указания количества потоков или процессов, которые могут получить доступ к общему ресурсу. В операционных системах семафоры используются для синхронизации доступа к общим ресурсам несколькими процессами или потоками.

В простейшем случае двоичный семафор может использоваться как примитив синхронизации "захват-освобождение", позволяя только одному процессу получить доступ к ресурсу в любой момент времени.

## Команда man

Команда `man` (manual) предоставляет доступ к справочным страницам системных команд, программ, конфигурационных файлов и других компонентов системы. Справочные страницы организованы по разделам:

- man1 - пользовательские команды
- man2 - системные вызовы
- man3 - библиотечные функции
- man4 - специальные файлы
- man5 - форматы файлов
- man6 - игры
- man7 - различные
- man8 - системные команды

## Генерация случайных чисел в Bash

В Bash доступна встроенная переменная $RANDOM, которая генерирует псевдослучайные числа в диапазоне от 0 до 32767. Для получения случайных значений в определённом диапазоне можно использовать арифметические операции.

# Выполнение лабораторной работы

## Задание 1: Реализация упрощённого механизма семафоров

Для реализации семафора создадим скрипт, который будет использовать файл-блокировку для синхронизации доступа к ресурсу. Скрипт будет ожидать освобождения ресурса в течение времени t1, а затем использовать его в течение времени t2.

Создадим файл `semaphore.sh`:

```bash
#!/bin/bash

# semaphore.sh - упрощённый механизм семафоров

RESOURCE_LOCK="/tmp/semaphore.lock"
TIME_WAIT=${1:-5}  # время ожидания освобождения ресурса (t1), по умолчанию 5 секунд
TIME_USE=${2:-3}   # время использования ресурса (t2), по умолчанию 3 секунды
PROCESS_NAME=${3:-"Process $$"}  # имя процесса

echo "$PROCESS_NAME: Попытка захвата ресурса..."

# Цикл ожидания освобождения ресурса
attempts=0
while [ -f "$RESOURCE_LOCK" ]; do
    attempts=$((attempts + 1))
    echo "$PROCESS_NAME: Ресурс занят, ожидание... (попытка $attempts)"
    sleep 1
    
    # Если прошло больше времени, чем t1, выходим
    if [ $attempts -gt $TIME_WAIT ]; then
        echo "$PROCESS_NAME: Время ожидания истекло, выход."
        exit 1
    fi
done

# Захватываем ресурс
echo $$ > "$RESOURCE_LOCK"
echo "$PROCESS_NAME: Ресурс захвачен, использование в течение $TIME_USE секунд..."

# Используем ресурс
sleep $TIME_USE

# Освобождаем ресурс
rm -f "$RESOURCE_LOCK"
echo "$PROCESS_NAME: Ресурс освобождён"
```

Сделаем скрипт исполняемым и запустим несколько экземпляров для демонстрации работы семафора:

```bash
chmod +x semaphore.sh
```

Запуск в разных терминалах:

```bash
# Терминал 1:
./semaphore.sh 5 3 "Process-1"

# Терминал 2:
./semaphore.sh 5 3 "Process-2"

# Терминал 3:
./semaphore.sh 5 3 "Process-3"
```

Для запуска в фоновом режиме с перенаправлением вывода:

```bash
# Запуск в фоне с перенаправлением в другой терминал
./semaphore.sh 5 3 "Background-Process" > /dev/tty2 &
```

Результаты работы семафора показаны на рисунках @fig-content1, @fig-contnet2 и @fig-content3.

![Содержимое файла semaphore.sh](image/content1.png){#fig-content1 width=80%}

![Результат запуска семафора](image/run2.png){#fig-contnet2 width=80%}

![Множественный запуск семафора](image/content3.png){#fig-content3 width=80%}

## Задание 2: Реализация команды man

Создадим скрипт `myman.sh`, который будет реализовывать функциональность команды man:

```bash
#!/bin/bash

# myman.sh - реализация команды man

COMMAND=$1

if [ -z "$COMMAND" ]; then
    echo "Использование: $0 <команда>"
    echo "Пример: $0 ls"
    exit 1
fi

# Проверяем наличие справки в /usr/share/man/man1/
MANPAGE="/usr/share/man/man1/$COMMAND.1.gz"

if [ -f "$MANPAGE" ]; then
    echo "Найдена справка для команды: $COMMAND"
    echo "=========================================="
    zcat "$MANPAGE" | less
elif [ -f "/usr/share/man/man1/$COMMAND.1" ]; then
    MANPAGE="/usr/share/man/man1/$COMMAND.1"
    echo "Найдена справка для команды: $COMMAND"
    echo "=========================================="
    cat "$MANPAGE" | less
else
    # Проверяем другие разделы man, если не нашли в man1
    for section in {2..8}; do
        if [ -f "/usr/share/man/man$section/$COMMAND.$section.gz" ]; then
            MANPAGE="/usr/share/man$section/$COMMAND.$section.gz"
            echo "Найдена справка для команды: $COMMAND (раздел $section)"
            echo "=================================================="
            zcat "$MANPAGE" | less
            exit 0
        elif [ -f "/usr/share/man/man$section/$COMMAND.$section" ]; then
            MANPAGE="/usr/share/man/man$section/$COMMAND.$section"
            echo "Найдена справка для команды: $COMMAND (раздел $section)"
            echo "=================================================="
            cat "$MANPAGE" | less
            exit 0
        fi
    done
    
    # Если не найдено нигде
    echo "Справка для команды '$COMMAND' не найдена."
    exit 1
fi
```

Сделаем скрипт исполняемым:

```bash
chmod +x myman.sh
```

Примеры использования:

```bash
# Просмотр справки для команды ls
./myman.sh ls

# Просмотр справки для команды grep
./myman.sh grep

# Попытка просмотра справки для несуществующей команды
./myman.sh nonexistentcommand
```

Результаты работы реализации команды man показаны на рисунках @fig-run1 и @fig-run2.

![Содержимое файла myman.sh](image/run1.png){#fig-run1 width=80%}

![Результат запуска myman.sh](image/contnet2.png){#fig-run2 width=80%}

## Задание 3: Генерация случайной последовательности букв

Создадим скрипт `random_seq.sh`, который будет генерировать случайную последовательность латинских букв с использованием переменной $RANDOM:

```bash
#!/bin/bash

# random_seq.sh - генератор случайной последовательности букв

LENGTH=${1:-10}  # длина последовательности, по умолчанию 10

generate_random_char() {
    # Генерируем случайное число и преобразуем в букву
    # $RANDOM возвращает число от 0 до 32767
    # Для получения буквы используем остаток от деления на 26
    local random_num=$((RANDOM % 26))
    local char=$(printf "\\$(printf '%03o' $((97 + random_num)))")
    echo -n "$char"
}

generate_random_sequence() {
    local len=$1
    local sequence=""
    
    for ((i = 0; i < len; i++)); do
        sequence="${sequence}$(generate_random_char)"
    done
    
    echo "$sequence"
}

echo "Генерация случайной последовательности из $LENGTH букв:"
result=$(generate_random_sequence $LENGTH)
echo "$result"

# Дополнительно: генерация последовательности в верхнем регистре
echo "Та же последовательность в верхнем регистре:"
echo "$result" | tr '[:lower:]' '[:upper:]'
```

Сделаем скрипт исполняемым:

```bash
chmod +x random_seq.sh
```

Примеры использования:

```bash
# Генерация последовательности длиной 10 (по умолчанию)
./random_seq.sh

# Генерация последовательности длиной 20
./random_seq.sh 20

# Генерация последовательности длиной 5
./random_seq.sh 5
```

Результаты работы генератора случайных последовательностей показаны на рисунке @fig-run3.

![Результат запуска random_seq.sh](image/run3.png){#fig-run3 width=80%}

# Выводы

В ходе лабораторной работы были успешно выполнены все поставленные задачи:

1. ✅ Реализован упрощённый механизм семафоров с использованием файловой блокировки
2. ✅ Создан скрипт, реализующий функциональность команды man
3. ✅ Разработан генератор случайных последовательностей латинских букв с использованием $RANDOM

Полученные навыки позволяют реализовывать продвинутые механизмы синхронизации, создавать собственные утилиты и работать с генерацией псевдослучайных данных в shell-скриптах.

# Список литературы{.unnumbered}

::: {#refs}
- Bash Manual: [https://www.gnu.org/software/bash/manual/](https://www.gnu.org/software/bash/manual/)
- Advanced Bash-Scripting Guide: [https://tldp.org/LDP/abs/html/](https://tldp.org/LDP/abs/html/)
- Linux Man Pages: [https://man7.org/linux/man-pages/](https://man7.org/linux/man-pages/)
- Semaphore Concept: [https://en.wikipedia.org/wiki/Semaphore_(programming)](https://en.wikipedia.org/wiki/Semaphore_(programming))
:::
