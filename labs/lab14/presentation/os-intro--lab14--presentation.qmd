---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05-24"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19
## Title
title: "Лабораторная работа №14"
subtitle: "Реализация продвинутых механизмов в shell"
license: CC BY
date: today
date-format: "YYYY-MM-DD" # Example: 2025-09-06
---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="70%"}

  * Mohamed Musa
  * студент
  * Российский университет дружбы народов им. П. Лумумбы
  * 1032248286@pfur.ru

:::
::: {.column width="30%"}
:::
::::::::::::::

# Вводная часть

## Актуальность

- Изучение продвинутых концепций программирования в Linux
- Реализация упрощённого механизма семафоров
- Создание собственной реализации команды man
- Генерация случайных последовательностей с помощью $RANDOM

## Объект и предмет исследования

- Shell-скрипты и их возможности
- Механизмы синхронизации процессов
- Системные справочные страницы (man pages)
- Генерация псевдослучайных чисел в Bash

## Цели и задачи

- Реализовать упрощённый механизм семафоров
- Создать собственную реализацию команды man
- Разработать генератор случайных последовательностей
- Практиковать продвинутые концепции программирования в shell

# Основные понятия

## Семафоры

- Семафор - переменная для синхронизации доступа к общему ресурсу
- Используется для предотвращения конфликта между процессами
- Двоичный семафор: 0 - ресурс занят, 1 - ресурс свободен
- В shell реализуется через файл-блокировку

## Команда man

- Справочная система Linux
- Структура: man1, man2, ..., man8 (разделы)
- Формат: /usr/share/man/man[номер_раздела]/имя.номер_раздела.gz
- Пример: /usr/share/man/man1/ls.1.gz

## Генерация случайных чисел

- В Bash переменная $RANDOM генерирует числа от 0 до 32767
- Используется для получения псевдослучайных значений
- Для получения букв используем: $(printf '\\$(printf '%03o' $((97 + RANDOM % 26)))')

# Практическая реализация

## Задание 1: Семафор

```bash
#!/bin/bash
# semaphore.sh - упрощённый механизм семафоров
RESOURCE_LOCK="/tmp/semaphore.lock"
TIME_WAIT=${1:-5} # время ожидания
TIME_USE=${2:-3}   # время использования
PROCESS_NAME=${3:-"Process $$"}

echo "$PROCESS_NAME: Попытка захвата ресурса..."
while [ -f "$RESOURCE_LOCK" ]; do
    echo "$PROCESS_NAME: Ресурс занят, ожидание..."
    sleep 1
done

echo $$ > "$RESOURCE_LOCK"
echo "$PROCESS_NAME: Ресурс захвачен, использование в течение $TIME_USE секунд..."
sleep $TIME_USE
rm -f "$RESOURCE_LOCK"
echo "$PROCESS_NAME: Ресурс освобождён"
```

## Задание 2: Команда man

```bash
#!/bin/bash
# myman.sh - реализация команды man
COMMAND=$1
if [ -z "$COMMAND" ]; then
    echo "Использование: $0 <команда>"
    exit 1
fi

MANPAGE="/usr/share/man/man1/$COMMAND.1.gz"
if [ -f "$MANPAGE" ]; then
    zcat "$MANPAGE" | less
else
    echo "Справка для команды '$COMMAND' не найдена."
    exit 1
fi
```

## Задание 3: Генерация случайных последовательностей

```bash
#!/bin/bash
# random_seq.sh - генератор случайной последовательности
LENGTH=${1:-10}

generate_random_char() {
    local random_num=$((RANDOM % 26))
    local char=$(printf "\\$(printf '%03o' $((97 + random_num)))")
    echo -n "$char"
}

generate_random_sequence() {
    local len=$1
    local sequence=""
    for ((i = 0; i < len; i++)); do
        sequence="${sequence}$(generate_random_char)"
    done
    echo "$sequence"
}

result=$(generate_random_sequence $LENGTH)
echo "Случайная последовательность: $result"
```

# Результаты

## Задание 1: Результаты работы семафора

- Успешная реализация механизма синхронизации
- Использование файла-блокировки для синхронизации
- Возможность работы с несколькими процессами
- Запуск в фоновом режиме с перенаправлением вывода

## Задание 2: Результаты работы man-команды

- Успешная реализация команды man
- Поиск справочных страниц в /usr/share/man/man1/
- Обработка сжатых (.gz) файлов
- Корректная обработка отсутствующих страниц

## Задание 3: Результаты генерации случайных последовательностей

- Успешная генерация случайных последовательностей
- Использование переменной $RANDOM
- Генерация букв латинского алфавита
- Возможность задания длины последовательности

# Выводы

## Основные результаты

- ✅ Реализован упрощённый механизм семафоров
- ✅ Создан скрипт, реализующий функциональность команды man
- ✅ Разработан генератор случайных последовательностей латинских букв

## Полученные навыки

- Работа с файловыми блокировками
- Обработка системных справочных файлов
- Генерация псевдослучайных данных
- Создание продвинутых shell-скриптов

# Спасибо за внимание
