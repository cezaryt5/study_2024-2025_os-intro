---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19
## Title
title: "Лабораторная работа №10"
subtitle: "Основы программирования в Linux"
license: CC BY
date: today
date-format: "YYYY-MM-DD"
---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="70%"}

  * Mohamed Musa
  * Студент 2 курса
  * Группа НКАбд-05-24
  * Студенческий билет: 1032248286
  * Российский университет дружбы народов
  * [1032248286@pfur.ru](mailto:1032248286@pfur.ru)

:::
::: {.column width="30%"}

![](./image/kulyabov.jpg)

:::
::::::::::::::

# Вводная часть

## Актуальность

**Программирование в Linux** — фундаментальный навык для:

::: incremental

- Системного администрирования
- Автоматизации задач
- Разработки системных утилит
- DevOps и CI/CD
- Работы с серверами

:::

## Объект и предмет исследования

**Объект исследования:**

- Программирование в операционной системе Linux

**Предмет исследования:**

::: incremental

- Bash скрипты и скриптовый язык
- Компиляция программ на языке C
- Инструменты разработки (gcc, gdb, make)
- Отладка и выполнение программ

:::

## Цели и задачи

**Цель работы:**

Изучить основы программирования в Linux, освоить создание скриптов и компиляцию программ.

**Задачи:**

::: incremental

1. Освоить создание и выполнение bash скриптов
2. Научиться работать с текстовыми редакторами
3. Изучить компиляцию программ с помощью gcc
4. Практиковать отладку программ с помощью gdb
5. Освоить работу с переменными, условиями и циклами

:::

## Материалы и методы

**Используемые инструменты:**

::: incremental

- **Bash** — командная оболочка и скриптовый язык
- **GCC** — компилятор GNU для языка C
- **GDB** — отладчик GNU
- **Make** — утилита автоматизации сборки
- **Текстовые редакторы** — nano, vim, gedit, mcedit

:::

# Теоретические сведения

## Bash скрипты

**Bash (Bourne Again Shell)** — командная оболочка и язык программирования.

**Структура скрипта:**

```bash
#!/bin/bash
# Комментарий

echo "Hello, World!"
```

::: incremental

- **Shebang (#!)** — указывает интерпретатор
- **Комментарии (#)** — пояснения к коду
- **Команды** — выполняются последовательно

:::

## Создание и запуск скрипта

**Процесс создания:**

```bash
# Создать файл
nano script.sh

# Сделать исполняемым
chmod +x script.sh

# Запустить
./script.sh
```

## Переменные в Bash

**Объявление и использование:**

```bash
# Объявление (без пробелов!)
name="Mohamed"
age=20

# Использование
echo "Меня зовут $name"
echo "Мне ${age} лет"
```

**Специальные переменные:**

::: incremental

- `$0` — имя скрипта
- `$1, $2, ...` — аргументы
- `$#` — количество аргументов
- `$?` — код возврата последней команды

:::

## Условные операторы

**Синтаксис if:**

```bash
if [ условие ]; then
    # команды
elif [ другое_условие ]; then
    # команды
else
    # команды
fi
```

## Операторы сравнения

**Числа:**

- `-eq` — равно
- `-ne` — не равно
- `-lt` — меньше
- `-gt` — больше
- `-le` — меньше или равно
- `-ge` — больше или равно

**Строки:**

- `=` — равно
- `!=` — не равно
- `-z` — пустая строка
- `-n` — не пустая строка

## Операторы для файлов

**Проверка файлов:**

::: incremental

- `-e` — файл существует
- `-f` — обычный файл
- `-d` — директория
- `-r` — доступен для чтения
- `-w` — доступен для записи
- `-x` — исполняемый

:::

**Пример:**

```bash
if [ -f "file.txt" ]; then
    echo "Файл существует"
fi
```

## Циклы в Bash

**Цикл for:**

```bash
# Диапазон
for i in {1..5}; do
    echo "Число: $i"
done

# Файлы
for file in *.txt; do
    echo "Файл: $file"
done
```

## Цикл while

**Синтаксис:**

```bash
counter=1
while [ $counter -le 5 ]; do
    echo "Итерация $counter"
    ((counter++))
done
```

**C-style цикл:**

```bash
for ((i=0; i<5; i++)); do
    echo "i = $i"
done
```

## Функции

**Объявление и вызов:**

```bash
# Объявление
greet() {
    echo "Привет, $1!"
}

# Вызов
greet "Mohamed"
```

**С возвратом значения:**

```bash
add() {
    echo $(($1 + $2))
}

result=$(add 5 3)
echo "Сумма: $result"
```

## Компилятор GCC

**GCC (GNU Compiler Collection)** — компилятор для C, C++ и других языков.

**Основной синтаксис:**

```bash
gcc [опции] файл.c -o программа
```

**Основные опции:**

::: incremental

- `-o filename` — имя выходного файла
- `-Wall` — все предупреждения
- `-g` — отладочная информация
- `-O2` — оптимизация уровня 2

:::

## Этапы компиляции

**Процесс компиляции:**

::: incremental

1. **Препроцессинг** — обработка директив (#include, #define)
2. **Компиляция** — преобразование в ассемблер
3. **Ассемблирование** — создание объектных файлов (.o)
4. **Линковка** — объединение с библиотеками

:::

```bash
# Все этапы сразу
gcc hello.c -o hello

# Поэтапно
gcc -E hello.c -o hello.i    # препроцессинг
gcc -S hello.i -o hello.s    # компиляция
gcc -c hello.s -o hello.o    # ассемблирование
gcc hello.o -o hello          # линковка
```

## Отладчик GDB

**GDB (GNU Debugger)** — отладчик для программ на C/C++.

**Основные команды:**

```bash
# Компиляция с отладкой
gcc -g program.c -o program

# Запуск отладчика
gdb ./program
```

**В gdb:**

- `run` — запустить
- `break` — точка останова
- `next` — следующая строка
- `print` — вывести переменную
- `continue` — продолжить

## Права доступа

**chmod** — изменение прав доступа.

**Числовой формат:**

- **4** — чтение (r)
- **2** — запись (w)
- **1** — выполнение (x)

```bash
chmod +x script.sh    # добавить выполнение
chmod 755 script.sh   # rwxr-xr-x
chmod 644 file.txt    # rw-r--r--
```

# Выполнение работы

## Простой bash скрипт

**Создание скрипта приветствия:**

```bash
#!/bin/bash
# Простой скрипт

echo "Привет, мир!"
echo "Текущая дата: $(date)"
echo "Пользователь: $(whoami)"
echo "Домашняя директория: $HOME"
```

**Запуск:**

```bash
chmod +x hello.sh
./hello.sh
```

## Скрипт с переменными

**Работа с переменными:**

```bash
#!/bin/bash

name="Mohamed Musa"
student_id="1032248286"
group="НКАбд-05-24"

echo "=== Информация о студенте ==="
echo "Имя: $name"
echo "Студенческий билет: $student_id"
echo "Группа: $group"
```

## Интерактивный скрипт

**Запрос ввода пользователя:**

```bash
#!/bin/bash

read -p "Введите ваше имя: " username
read -p "Введите ваш возраст: " userage

echo "Привет, $username!"

if [ $userage -ge 18 ]; then
    echo "Вы совершеннолетний"
else
    echo "Вы несовершеннолетний"
fi
```

## Скрипт с условиями

**Проверка четности числа:**

```bash
#!/bin/bash

number=$1

if [ $((number % 2)) -eq 0 ]; then
    echo "$number - четное"
else
    echo "$number - нечетное"
fi

if [ $number -lt 0 ]; then
    echo "Отрицательное"
elif [ $number -eq 0 ]; then
    echo "Ноль"
else
    echo "Положительное"
fi
```

## Скрипт с циклами

**Различные типы циклов:**

```bash
#!/bin/bash

# Цикл for
for i in {1..5}; do
    echo "Итерация $i"
done

# Цикл while
counter=1
while [ $counter -le 5 ]; do
    echo "Счетчик: $counter"
    ((counter++))
done
```

## Скрипт с функциями

**Создание функций:**

```bash
#!/bin/bash

greet() {
    echo "Привет, $1!"
}

add() {
    echo $(($1 + $2))
}

greet "Mohamed"
sum=$(add 10 20)
echo "10 + 20 = $sum"
```

## Программа на C

**Простая программа:**

```c
// hello.c
#include <stdio.h>

int main() {
    printf("Привет из C!\n");
    printf("Студент: Mohamed Musa\n");
    printf("Группа: НКАбд-05-24\n");
    return 0;
}
```

## Написание кода

![Процесс написания программного кода](image/code.png){width=70%}

## Компиляция программы

**Компиляция и запуск:**

```bash
# Компиляция с предупреждениями
gcc -Wall hello.c -o hello

# Проверка файла
ls -lh hello

# Запуск
./hello
```

**Вывод:**
```
Привет из C!
Студент: Mohamed Musa
Группа: НКАбд-05-24
```

## Программа с аргументами

**Обработка аргументов командной строки:**

```c
// args.c
#include <stdio.h>

int main(int argc, char *argv[]) {
    printf("Аргументов: %d\n", argc);
    printf("Программа: %s\n", argv[0]);

    for (int i = 1; i < argc; i++) {
        printf("  %d: %s\n", i, argv[i]);
    }
    return 0;
}
```

## Выполнение команд

![Компиляция и запуск программ](image/commands.png){width=70%}

## Работа с правами

**Установка прав доступа:**

```bash
# Создать скрипт
echo '#!/bin/bash' > test.sh
echo 'echo "Test"' >> test.sh

# Проверить права
ls -l test.sh

# Сделать исполняемым
chmod +x test.sh

# Запустить
./test.sh
```

## Создание Makefile

**Автоматизация сборки:**

```makefile
CC = gcc
CFLAGS = -Wall -g
TARGET = program

all: $(TARGET)

$(TARGET): main.c
	$(CC) $(CFLAGS) main.c -o $(TARGET)

clean:
	rm -f $(TARGET)

run: $(TARGET)
	./$(TARGET)
```

## Использование Make

**Команды make:**

```bash
# Компиляция
make

# Запуск
make run

# Очистка
make clean
```

## Отладка с GDB

**Использование отладчика:**

```bash
# Компиляция с отладкой
gcc -g -Wall program.c -o program

# Запуск gdb
gdb ./program

# В gdb:
(gdb) break main
(gdb) run
(gdb) next
(gdb) print variable
(gdb) continue
(gdb) quit
```

# Результаты

## Достигнутые результаты

::: incremental

- ✅ Освоено создание и выполнение bash скриптов
- ✅ Изучена работа с текстовыми редакторами
- ✅ Практикована компиляция программ на C
- ✅ Выполнена отладка программ с помощью gdb
- ✅ Освоена работа с переменными, условиями и циклами

:::

## Полученные навыки

**Bash скриптинг:**

::: incremental

- Создание скриптов с shebang
- Работа с переменными и специальными переменными
- Условные операторы и циклы
- Функции и передача параметров
- Интерактивный ввод данных

:::

## Компиляция и отладка

**Работа с C:**

::: incremental

- Компиляция программ с gcc
- Использование опций компиляции
- Отладка с помощью gdb
- Автоматизация сборки с make
- Работа с аргументами командной строки

:::

# Заключение

## Выводы

**Освоенные навыки программирования в Linux:**

::: incremental

- **Bash скриптинг** — автоматизация задач
- **Компиляция** — создание исполняемых файлов
- **Отладка** — поиск и исправление ошибок
- **Инструменты разработки** — gcc, gdb, make
- **Управление правами** — chmod для безопасности

:::

## Практическое применение

**Где используются эти навыки:**

::: incremental

- Системное администрирование Linux
- Автоматизация рутинных задач
- Разработка системных утилит
- DevOps и CI/CD пайплайны
- Программирование на низком уровне

:::

Программирование в Linux — фундаментальный навык для работы с операционными системами!
