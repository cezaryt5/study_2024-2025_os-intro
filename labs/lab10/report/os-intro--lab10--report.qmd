---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19

## Title
title: "Лабораторная работа №10"
subtitle: "Основы программирования в Linux"
license: "CC BY"
---

# Цель работы

Изучить основы программирования в операционной системе Linux, освоить создание и выполнение скриптов, а также работу с компиляторами и интерпретаторами.

# Задание

1. Освоить создание и выполнение bash скриптов
2. Научиться работать с текстовыми редакторами для написания кода
3. Изучить основные команды для компиляции программ
4. Практиковать отладку и выполнение программ
5. Освоить работу с переменными и условными операторами

# Теоретическое введение

## Программирование в Linux

Linux предоставляет мощную среду для программирования с поддержкой множества языков и инструментов разработки.

**Основные типы программ:**

- **Скрипты** — текстовые файлы с последовательностью команд, выполняемые интерпретатором
- **Компилируемые программы** — исходный код преобразуется в машинный код перед выполнением
- **Интерпретируемые программы** — код выполняется построчно интерпретатором

## Bash скрипты

**Bash (Bourne Again Shell)** — командная оболочка и скриптовый язык программирования.

**Структура bash скрипта:**

```bash
#!/bin/bash
# Это комментарий

# Команды скрипта
echo "Hello, World!"
```

**Shebang (#!):**

- Первая строка скрипта, указывающая интерпретатор
- `#!/bin/bash` — использовать bash
- `#!/bin/sh` — использовать sh (POSIX shell)
- `#!/usr/bin/env python3` — использовать python3

**Создание и запуск скрипта:**

```bash
# Создать файл скрипта
nano script.sh

# Сделать исполняемым
chmod +x script.sh

# Запустить скрипт
./script.sh

# Или через интерпретатор
bash script.sh
```

## Переменные в Bash

**Объявление и использование переменных:**

```bash
# Объявление переменной (без пробелов вокруг =)
name="Mohamed"
age=20
university="RUDN"

# Использование переменных
echo "Меня зовут $name"
echo "Мне ${age} лет"
echo "Я учусь в ${university}"
```

**Специальные переменные:**

- `$0` — имя скрипта
- `$1, $2, ...` — аргументы командной строки
- `$#` — количество аргументов
- `$@` — все аргументы
- `$?` — код возврата последней команды
- `$$` — PID текущего процесса
- `$USER` — имя текущего пользователя
- `$HOME` — домашняя директория
- `$PWD` — текущая директория

**Чтение ввода пользователя:**

```bash
# Запросить ввод
read -p "Введите ваше имя: " username
echo "Привет, $username!"

# Чтение без отображения (для паролей)
read -sp "Введите пароль: " password
```

## Условные операторы

**Оператор if:**

```bash
if [ условие ]; then
    # команды
elif [ другое_условие ]; then
    # команды
else
    # команды
fi
```

**Операторы сравнения чисел:**

- `-eq` — равно (equal)
- `-ne` — не равно (not equal)
- `-lt` — меньше (less than)
- `-le` — меньше или равно (less or equal)
- `-gt` — больше (greater than)
- `-ge` — больше или равно (greater or equal)

**Операторы сравнения строк:**

- `=` или `==` — равно
- `!=` — не равно
- `-z` — строка пустая
- `-n` — строка не пустая

**Операторы для файлов:**

- `-e` — файл существует
- `-f` — обычный файл
- `-d` — директория
- `-r` — файл доступен для чтения
- `-w` — файл доступен для записи
- `-x` — файл исполняемый

**Примеры:**

```bash
# Сравнение чисел
if [ $age -ge 18 ]; then
    echo "Совершеннолетний"
fi

# Сравнение строк
if [ "$name" = "Mohamed" ]; then
    echo "Привет, Мохамед!"
fi

# Проверка файла
if [ -f "file.txt" ]; then
    echo "Файл существует"
fi
```

## Циклы

**Цикл for:**

```bash
# Перебор списка
for item in item1 item2 item3; do
    echo $item
done

# Перебор файлов
for file in *.txt; do
    echo "Обработка $file"
done

# Числовой диапазон
for i in {1..10}; do
    echo "Число: $i"
done

# C-style цикл
for ((i=0; i<10; i++)); do
    echo $i
done
```

**Цикл while:**

```bash
counter=1
while [ $counter -le 5 ]; do
    echo "Итерация $counter"
    ((counter++))
done
```

**Цикл until:**

```bash
counter=1
until [ $counter -gt 5 ]; do
    echo "Итерация $counter"
    ((counter++))
done
```

## Функции

**Объявление и вызов функций:**

```bash
# Объявление функции
function greet() {
    echo "Привет, $1!"
}

# Или без ключевого слова function
greet() {
    echo "Привет, $1!"
}

# Вызов функции
greet "Mohamed"

# Функция с возвратом значения
add() {
    local result=$(($1 + $2))
    echo $result
}

sum=$(add 5 3)
echo "Сумма: $sum"
```

## Компиляция программ на C

**GCC (GNU Compiler Collection)** — компилятор для языков C, C++, и других.

**Основной синтаксис:**

```bash
gcc [опции] исходный_файл -o выходной_файл
```

**Основные опции:**

- `-o filename` — имя выходного файла
- `-Wall` — показать все предупреждения
- `-g` — включить отладочную информацию
- `-O2` — оптимизация уровня 2
- `-c` — только компиляция (без линковки)
- `-I directory` — добавить директорию для поиска заголовочных файлов
- `-L directory` — добавить директорию для поиска библиотек
- `-l library` — подключить библиотеку

**Примеры компиляции:**

```bash
# Простая компиляция
gcc hello.c -o hello

# С предупреждениями
gcc -Wall hello.c -o hello

# С оптимизацией
gcc -O2 hello.c -o hello

# С отладочной информацией
gcc -g hello.c -o hello

# Компиляция нескольких файлов
gcc main.c utils.c -o program

# Только компиляция (создание объектного файла)
gcc -c file.c -o file.o

# Линковка объектных файлов
gcc file1.o file2.o -o program
```

**Этапы компиляции:**

1. **Препроцессинг** — обработка директив (#include, #define)
2. **Компиляция** — преобразование в ассемблерный код
3. **Ассемблирование** — преобразование в машинный код (объектные файлы)
4. **Линковка** — объединение объектных файлов и библиотек

## Отладка программ

**GDB (GNU Debugger)** — отладчик для программ на C/C++.

**Основные команды:**

```bash
# Компиляция с отладочной информацией
gcc -g program.c -o program

# Запуск отладчика
gdb ./program

# Команды в gdb:
# run (r)          - запустить программу
# break (b)        - установить точку останова
# continue (c)     - продолжить выполнение
# next (n)         - следующая строка (не входя в функции)
# step (s)         - следующая строка (входя в функции)
# print (p)        - вывести значение переменной
# list (l)         - показать исходный код
# quit (q)         - выйти из отладчика
```

## Права доступа к файлам

**chmod** — изменение прав доступа к файлам.

**Числовой формат:**

- **4** — чтение (r)
- **2** — запись (w)
- **1** — выполнение (x)

```bash
# Сделать файл исполняемым для всех
chmod +x script.sh

# Установить права 755 (rwxr-xr-x)
chmod 755 script.sh

# Установить права 644 (rw-r--r--)
chmod 644 file.txt

# Только владелец может выполнять
chmod 700 script.sh
```

**Символьный формат:**

```bash
# Добавить право выполнения владельцу
chmod u+x script.sh

# Убрать право записи у группы
chmod g-w file.txt

# Установить права чтения для всех
chmod a+r file.txt

# u - user (владелец)
# g - group (группа)
# o - others (остальные)
# a - all (все)
```

## Текстовые редакторы

**Основные редакторы в Linux:**

1. **nano** — простой редактор для начинающих
   ```bash
   nano filename.txt
   # Ctrl+O - сохранить
   # Ctrl+X - выйти
   ```

2. **vim** — мощный редактор с модальным интерфейсом
   ```bash
   vim filename.txt
   # i - режим вставки
   # Esc - командный режим
   # :w - сохранить
   # :q - выйти
   # :wq - сохранить и выйти
   ```

3. **gedit** — графический редактор
   ```bash
   gedit filename.txt &
   ```

4. **mcedit** — редактор из Midnight Commander
   ```bash
   mcedit filename.txt
   ```

# Выполнение лабораторной работы

## Создание простого bash скрипта

Был создан первый bash скрипт для вывода приветствия:

```bash
#!/bin/bash
# Простой скрипт приветствия

echo "Привет, мир!"
echo "Это мой первый скрипт в Linux"
echo "Текущая дата: $(date)"
echo "Текущий пользователь: $(whoami)"
echo "Домашняя директория: $HOME"
```

**Сохранение и запуск:**

```bash
# Создать файл
nano hello.sh

# Сделать исполняемым
chmod +x hello.sh

# Запустить
./hello.sh
```

## Работа с переменными

Был создан скрипт для работы с переменными:

```bash
#!/bin/bash
# Скрипт с переменными

# Объявление переменных
name="Mohamed Musa"
student_id="1032248286"
group="НКАбд-05-24"
university="RUDN University"

# Вывод информации
echo "=== Информация о студенте ==="
echo "Имя: $name"
echo "Студенческий билет: $student_id"
echo "Группа: $group"
echo "Университет: $university"
echo "============================"

# Арифметические операции
age=20
next_year=$((age + 1))
echo "Текущий возраст: $age"
echo "Возраст в следующем году: $next_year"
```

## Интерактивный скрипт с вводом

Создан скрипт, запрашивающий ввод пользователя:

```bash
#!/bin/bash
# Интерактивный скрипт

echo "Добро пожаловать в программу!"
read -p "Введите ваше имя: " username
read -p "Введите ваш возраст: " userage

echo ""
echo "Привет, $username!"
echo "Вам $userage лет."

if [ $userage -ge 18 ]; then
    echo "Вы совершеннолетний."
else
    echo "Вы несовершеннолетний."
fi
```

## Условные операторы

Был создан скрипт с различными условными операторами:

```bash
#!/bin/bash
# Скрипт с условиями

# Проверка аргументов
if [ $# -eq 0 ]; then
    echo "Использование: $0 <число>"
    exit 1
fi

number=$1

# Проверка четности
if [ $((number % 2)) -eq 0 ]; then
    echo "$number - четное число"
else
    echo "$number - нечетное число"
fi

# Проверка диапазона
if [ $number -lt 0 ]; then
    echo "Число отрицательное"
elif [ $number -eq 0 ]; then
    echo "Число равно нулю"
else
    echo "Число положительное"
fi

# Проверка файла
filename="test.txt"
if [ -f "$filename" ]; then
    echo "Файл $filename существует"
    if [ -r "$filename" ]; then
        echo "Файл доступен для чтения"
    fi
else
    echo "Файл $filename не найден"
fi
```

## Циклы в bash

Создан скрипт с различными типами циклов:

```bash
#!/bin/bash
# Скрипт с циклами

echo "=== Цикл for с диапазоном ==="
for i in {1..5}; do
    echo "Итерация $i"
done

echo ""
echo "=== Цикл for с файлами ==="
for file in *.txt; do
    if [ -f "$file" ]; then
        echo "Найден файл: $file"
    fi
done

echo ""
echo "=== Цикл while ==="
counter=1
while [ $counter -le 5 ]; do
    echo "Счетчик: $counter"
    ((counter++))
done

echo ""
echo "=== C-style цикл ==="
for ((i=0; i<5; i++)); do
    echo "i = $i"
done
```

## Функции в bash

Был создан скрипт с функциями:

```bash
#!/bin/bash
# Скрипт с функциями

# Функция приветствия
greet() {
    local name=$1
    echo "Привет, $name!"
}

# Функция сложения
add() {
    local a=$1
    local b=$2
    local result=$((a + b))
    echo $result
}

# Функция проверки файла
check_file() {
    local filename=$1
    if [ -f "$filename" ]; then
        echo "Файл $filename существует"
        echo "Размер: $(stat -f%z "$filename" 2>/dev/null || stat -c%s "$filename") байт"
        return 0
    else
        echo "Файл $filename не найден"
        return 1
    fi
}

# Вызов функций
greet "Mohamed"
sum=$(add 10 20)
echo "10 + 20 = $sum"
check_file "test.txt"
```

## Создание программы на C

Была создана простая программа на языке C:

```c
// hello.c
#include <stdio.h>
#include <stdlib.h>

int main() {
    printf("Привет из программы на C!\n");
    printf("Это лабораторная работа №10\n");
    printf("Студент: Mohamed Musa\n");
    printf("Группа: НКАбд-05-24\n");
    return 0;
}
```

Процесс написания кода показан на рисунке @fig-code.

![Написание программного кода](image/code.png){#fig-code width=80%}

## Компиляция и запуск программы на C

Компиляция и выполнение программы:

```bash
# Компиляция с предупреждениями
gcc -Wall hello.c -o hello

# Проверка создания исполняемого файла
ls -lh hello

# Запуск программы
./hello
```

**Вывод программы:**
```
Привет из программы на C!
Это лабораторная работа №10
Студент: Mohamed Musa
Группа: НКАбд-05-24
```

## Программа с аргументами командной строки

Создана программа, принимающая аргументы:

```c
// args.c
#include <stdio.h>

int main(int argc, char *argv[]) {
    printf("Количество аргументов: %d\n", argc);
    printf("Имя программы: %s\n", argv[0]);

    if (argc > 1) {
        printf("Аргументы:\n");
        for (int i = 1; i < argc; i++) {
            printf("  %d: %s\n", i, argv[i]);
        }
    } else {
        printf("Аргументы не переданы\n");
    }

    return 0;
}
```

**Компиляция и запуск:**

```bash
gcc -Wall args.c -o args
./args один два три
```

## Выполнение команд

Были выполнены различные команды для компиляции и запуска программ. Результаты выполнения команд показаны на рисунке @fig-commands.

![Выполнение команд компиляции и запуска](image/commands.png){#fig-commands width=80%}

## Работа с правами доступа

Практика установки прав доступа:

```bash
# Создать скрипт
echo '#!/bin/bash' > test.sh
echo 'echo "Test script"' >> test.sh

# Проверить права (по умолчанию не исполняемый)
ls -l test.sh

# Сделать исполняемым
chmod +x test.sh

# Проверить изменение прав
ls -l test.sh

# Запустить
./test.sh

# Установить конкретные права (rwxr-xr-x)
chmod 755 test.sh

# Только владелец может выполнять (rwx------)
chmod 700 test.sh
```

## Создание Makefile

Был создан Makefile для автоматизации компиляции:

```makefile
# Makefile для проекта

CC = gcc
CFLAGS = -Wall -g
TARGET = program

all: $(TARGET)

$(TARGET): main.c utils.c
	$(CC) $(CFLAGS) main.c utils.c -o $(TARGET)

clean:
	rm -f $(TARGET) *.o

run: $(TARGET)
	./$(TARGET)

.PHONY: all clean run
```

**Использование:**

```bash
# Компиляция
make

# Запуск
make run

# Очистка
make clean
```

## Отладка программы

Практика использования отладчика gdb:

```bash
# Компиляция с отладочной информацией
gcc -g -Wall program.c -o program

# Запуск отладчика
gdb ./program

# В gdb:
(gdb) break main          # точка останова в main
(gdb) run                 # запустить программу
(gdb) next                # следующая строка
(gdb) print variable      # вывести значение переменной
(gdb) continue            # продолжить выполнение
(gdb) quit                # выйти
```

# Выводы

В ходе лабораторной работы были успешно выполнены следующие задачи:

1. ✅ **Освоено создание и выполнение bash скриптов**
   - Создание скриптов с shebang (#!/bin/bash)
   - Установка прав доступа (chmod +x)
   - Запуск скриптов различными способами

2. ✅ **Изучена работа с текстовыми редакторами для написания кода**
   - nano — простой редактор для начинающих
   - vim — мощный модальный редактор
   - gedit — графический редактор
   - mcedit — редактор из Midnight Commander

3. ✅ **Практикована компиляция программ на языке C**
   - Использование компилятора gcc
   - Опции компиляции (-Wall, -g, -O2)
   - Создание исполняемых файлов
   - Компиляция нескольких файлов

4. ✅ **Выполнена отладка и запуск программ**
   - Использование отладчика gdb
   - Установка точек останова
   - Просмотр значений переменных
   - Пошаговое выполнение программы

5. ✅ **Освоена работа с переменными и условными операторами**
   - Объявление и использование переменных
   - Специальные переменные ($0, $1, $#, $@, $?)
   - Условные операторы (if-elif-else)
   - Операторы сравнения чисел и строк
   - Проверка файлов и директорий

**Дополнительно освоены:**

- **Циклы в bash:**
  - Цикл for (с диапазоном, файлами, C-style)
  - Цикл while
  - Цикл until

- **Функции в bash:**
  - Объявление функций
  - Передача параметров
  - Локальные переменные
  - Возврат значений

- **Работа с правами доступа:**
  - Команда chmod (числовой и символьный формат)
  - Права чтения, записи, выполнения
  - Установка прав для владельца, группы, остальных

- **Автоматизация сборки:**
  - Создание Makefile
  - Правила компиляции
  - Цели (targets): all, clean, run

- **Программирование на C:**
  - Структура программы на C
  - Функция main()
  - Аргументы командной строки (argc, argv)
  - Стандартный ввод-вывод (printf, scanf)

**Полученные навыки:**

Освоены фундаментальные навыки программирования в среде Linux:

- **Bash скриптинг** — автоматизация задач и создание утилит
- **Компиляция программ** — преобразование исходного кода в исполняемые файлы
- **Отладка** — поиск и исправление ошибок в программах
- **Работа с инструментами разработки** — gcc, gdb, make
- **Управление правами доступа** — безопасность и контроль выполнения

Эти навыки являются основой для:

- Системного администрирования Linux
- Разработки системных утилит
- Автоматизации рутинных задач
- Создания скриптов для DevOps
- Программирования на низком уровне

# Список литературы{.unnumbered}

::: {#refs}
- Advanced Bash-Scripting Guide: [https://tldp.org/LDP/abs/html/](https://tldp.org/LDP/abs/html/)
- Bash Scripting Tutorial: [https://linuxconfig.org/bash-scripting-tutorial](https://linuxconfig.org/bash-scripting-tutorial)
- Bash Reference Manual: [https://www.gnu.org/software/bash/manual/](https://www.gnu.org/software/bash/manual/)
- GCC Manual: [https://gcc.gnu.org/onlinedocs/gcc/](https://gcc.gnu.org/onlinedocs/gcc/)
- GDB Documentation: [https://www.gnu.org/software/gdb/documentation/](https://www.gnu.org/software/gdb/documentation/)
- Linux Programming: [https://tldp.org/LDP/lpg/index.html](https://tldp.org/LDP/lpg/index.html)
- GNU Make Manual: [https://www.gnu.org/software/make/manual/](https://www.gnu.org/software/make/manual/)
- C Programming Language (K&R): [https://www.amazon.com/Programming-Language-2nd-Brian-Kernighan/dp/0131103628](https://www.amazon.com/Programming-Language-2nd-Brian-Kernighan/dp/0131103628)
:::
