---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19
## Title
title: "Лабораторная работа №4"
subtitle: "Продвинутое использование git"
license: CC BY
date: today
date-format: "YYYY-MM-DD"
---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="70%"}

  * Mohamed Musa
  * Студент группы НКАбд-05-24
  * Студенческий билет: 1032248286
  * Российский университет дружбы народов
  * [1032248286@pfur.ru](mailto:1032248286@pfur.ru)

:::
::: {.column width="30%"}

![](./image/kulyabov.jpg)

:::
::::::::::::::

# Вводная часть

## Актуальность

- Правильная организация работы с системой контроля версий критически важна для командной разработки
- Git-flow предоставляет структурированный подход к ветвлению
- Семантическое версионирование обеспечивает понятную систему нумерации релизов
- Conventional commits стандартизируют историю изменений

## Объект и предмет исследования

- Система контроля версий Git
- Модель ветвления Gitflow
- Инструменты автоматизации работы с репозиториями
- Стандарты оформления коммитов и версионирования

## Цели и задачи

- Получить навыки работы с git-flow
- Освоить семантическое версионирование
- Научиться использовать conventional commits
- Автоматизировать создание changelog

## Материалы и методы

- Git и расширение git-flow
- Node.js и пакетный менеджер pnpm
- Инструменты: commitizen, standard-changelog
- Тестовый репозиторий git-extended

# Теоретические сведения

## Gitflow Workflow

- Модель ветвления, опубликованная Винсентом Дриссеном
- Строгая модель с учётом выпуска проекта
- Основные ветки: **master** и **develop**
- Вспомогательные ветки: **feature**, **release**, **hotfix**

## Схема работы Gitflow

::: incremental

- Из master создаётся develop
- Из develop создаются feature ветки
- Feature ветки сливаются обратно в develop
- Из develop создаются release ветки
- Release сливается в master и develop
- Hotfix создаётся из master и сливается в обе ветки

:::

## Семантическое версионирование

Формат версии: **МАЖОРНАЯ.МИНОРНАЯ.ПАТЧ**

::: incremental

- **МАЖОРНАЯ** — обратно несовместимые изменения API
- **МИНОРНАЯ** — новая функциональность с обратной совместимостью
- **ПАТЧ** — обратно совместимые исправления ошибок

:::

Пример: `1.2.3` → `2.0.0` (breaking change)

## Conventional Commits

Структура коммита:

```
<тип>(<область>): <описание>

[тело]

[нижний колонтитул]
```

## Типы коммитов

::: incremental

- **feat:** — новая функция (MINOR)
- **fix:** — исправление ошибки (PATCH)
- **docs:** — изменения в документации
- **style:** — форматирование кода
- **refactor:** — рефакторинг
- **test:** — добавление тестов
- **chore:** — изменения в сборке

:::

## Инструменты

- **git-flow** — расширение Git для Gitflow
- **pnpm** — быстрый пакетный менеджер
- **commitizen** — помощник для создания коммитов
- **standard-changelog** — генератор changelog
# Выполнение работы

## Установка программного обеспечения

Установлены следующие компоненты:

::: incremental

- git-flow (из репозитория Copr)
- Node.js и pnpm
- commitizen (глобально через pnpm)
- standard-changelog (глобально через pnpm)

:::

## Установка git-flow

Для Fedora:

```bash
dnf copr enable elegos/gitflow
dnf install gitflow
```

## Установка Node.js

Установка необходимых пакетов:

```bash
dnf install nodejs
dnf install pnpm
```

## Настройка pnpm

Выполнена настройка pnpm package manager:

```bash
pnpm setup
source ~/.bashrc
```

## Настройка pnpm (скриншот)

![Настройка pnpm](image/pnpm.png){width=80%}

## Создание репозитория

Выполнены следующие шаги:

::: incremental

1. Создан репозиторий git-extended на GitHub
2. Инициализирован локальный репозиторий
3. Выполнен первый коммит
4. Настроено подключение к удаленному репозиторию

:::

## Конфигурация Node.js

Инициализация проекта:

```bash
pnpm init
```

Параметры:

- Название: git-extended
- Версия: 1.0.0
- Лицензия: CC-BY-4.0
- Автор: Mohamed Musa

## Файл package.json

Добавлена конфигурация для commitizen:

```json
"config": {
    "commitizen": {
        "path": "cz-conventional-changelog"
    }
}
```

## Файл package.json (скриншот)

![Конфигурация package.json](image/package.json.png){width=80%}

## Установка commitizen

Установка инструментов для conventional commits:

```bash
pnpm add -g commitizen
pnpm add -g standard-changelog
```

## Установка commitizen (скриншот)

![Установка commitizen](image/commitzen.png){width=80%}

## Инициализация git-flow

Команды инициализации:

```bash
git flow init
```

Параметры:

- Префикс для тегов: `v`
- Ветка production: master
- Ветка разработки: develop

## Загрузка веток на GitHub

```bash
git push --all
git branch --set-upstream-to=origin/develop develop
```

## Создание первого релиза

Команды для создания релиза 1.0.0:

```bash
git flow release start 1.0.0
standard-changelog --first-release
git add CHANGELOG.md
git commit -am 'chore(site): add changelog'
git flow release finish 1.0.0
```

## Создание первого релиза (скриншот)

![Процесс создания релиза 1.0.0](image/first release.png){width=80%}

## Публикация релиза

Отправка на GitHub:

```bash
git push --all
git push --tags
gh release create v1.0.0 -F CHANGELOG.md
```

## Работа с changelog

Автоматическая генерация журнала изменений:

```bash
standard-changelog
```

Журнал содержит:

- Список новых функций (feat)
- Исправления ошибок (fix)
- Другие изменения

## Работа с changelog (скриншот)

![Управление журналом изменений](image/changelog.png){width=80%}

## Добавление записей в changelog

Процесс обновления changelog при новом релизе:

```bash
git add CHANGELOG.md
git commit -am 'chore(site): update changelog'
```

## Добавление записей в changelog (скриншот)

![Обновление changelog](image/addChangelog.png){width=80%}

## Разработка новой функциональности

Работа с feature ветками:

```bash
git flow feature start feature_branch
# ... разработка ...
git flow feature finish feature_branch
```

## Создание нового релиза

Процесс создания релиза 1.2.3:

::: incremental

1. Создание ветки релиза
2. Обновление версии в package.json
3. Генерация changelog
4. Завершение релиза
5. Отправка на GitHub
6. Создание релиза на GitHub

:::

# Результаты

## Достигнутые результаты

::: incremental

- ✅ Установлено и настроено ПО для git-flow
- ✅ Создан репозиторий с поддержкой Gitflow
- ✅ Настроены conventional commits
- ✅ Созданы релизы с автоматическим changelog
- ✅ Отработаны сценарии работы с ветками

:::

## Полученные навыки

::: incremental

- Работа с моделью ветвления Gitflow
- Применение семантического версионирования
- Создание стандартизированных коммитов
- Автоматическая генерация документации
- Профессиональная организация рабочего процесса

:::

# Заключение

## Выводы

Освоены современные практики работы с Git:

::: incremental

- Git-flow обеспечивает структурированный процесс разработки
- Семантическое версионирование делает релизы понятными
- Conventional commits стандартизируют историю изменений
- Автоматизация упрощает создание документации
- Полученные навыки применимы в реальных проектах

:::

## Практическое применение

Изученные технологии используются в:

- Командной разработке ПО
- Open source проектах
- Корпоративных системах контроля версий
- CI/CD пайплайнах
