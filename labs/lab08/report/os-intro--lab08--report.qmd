---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "Nkabd-05"
  year: "2nd year"
  email: "mohamed.musa@student.rudn.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19

## Title
title: "Лабораторная работа №8"
subtitle: "Работа с процессами и текстовыми редакторами"
license: "CC BY"
---

# Цель работы

Изучить основы управления процессами в Linux, работу с текстовыми редакторами и навигацию по файловой системе с использованием различных инструментов.

# Задание

1. Освоить команды для управления процессами (ps, kill, pstree)
2. Научиться использовать текстовый редактор gedit
3. Практиковать поиск файлов с помощью команды find
4. Изучить справочную систему man для получения помощи
5. Освоить навигацию и работу с файлами

# Теоретическое введение

## Процессы в Linux

**Процесс** — это экземпляр выполняющейся программы. Каждый процесс имеет:

- **PID (Process ID)** — уникальный идентификатор процесса
- **PPID (Parent Process ID)** — идентификатор родительского процесса
- **Состояние** — running, sleeping, stopped, zombie
- **Приоритет** — определяет порядок выполнения
- **Владелец** — пользователь, запустивший процесс

## Команда ps (process status)

Команда `ps` отображает информацию о запущенных процессах.

**Основной синтаксис:**
```bash
ps [опции]
```

**Основные опции:**

- `ps aux` — показать все процессы всех пользователей с подробной информацией
- `ps -ef` — полный формат вывода всех процессов
- `ps -u username` — процессы конкретного пользователя
- `ps -p PID` — информация о конкретном процессе

**Столбцы вывода:**
- **USER** — владелец процесса
- **PID** — идентификатор процесса
- **%CPU** — использование процессора
- **%MEM** — использование памяти
- **STAT** — состояние процесса
- **COMMAND** — команда, запустившая процесс

## Команда kill

Команда `kill` используется для отправки сигналов процессам, чаще всего для их завершения.

**Основной синтаксис:**
```bash
kill [опции] PID
```

**Основные сигналы:**

- **SIGTERM (15)** — вежливое завершение (по умолчанию)
- **SIGKILL (9)** — принудительное завершение
- **SIGHUP (1)** — перезагрузка конфигурации
- **SIGSTOP (19)** — приостановка процесса
- **SIGCONT (18)** — продолжение выполнения

**Примеры:**
```bash
kill 1234           # отправить SIGTERM процессу 1234
kill -9 1234        # принудительно завершить процесс
kill -SIGTERM 1234  # то же, что и kill 1234
killall firefox     # завершить все процессы firefox
```

## Команда pstree

Команда `pstree` отображает процессы в виде дерева, показывая иерархию родительских и дочерних процессов.

**Основной синтаксис:**
```bash
pstree [опции] [PID|пользователь]
```

**Основные опции:**

- `-p` — показать PID процессов
- `-u` — показать владельцев процессов
- `-a` — показать аргументы командной строки
- `-h` — подсветить текущий процесс и его предков
- `-n` — сортировать по PID

## Команда find

Команда `find` используется для поиска файлов и директорий в файловой системе.

**Основной синтаксис:**
```bash
find [путь] [критерии] [действия]
```

**Критерии поиска:**

- `-name "pattern"` — поиск по имени (с учетом регистра)
- `-iname "pattern"` — поиск по имени (без учета регистра)
- `-type f` — только файлы
- `-type d` — только директории
- `-size +10M` — файлы больше 10 МБ
- `-mtime -7` — измененные за последние 7 дней
- `-user username` — файлы конкретного пользователя
- `-perm 755` — файлы с определенными правами

**Примеры:**
```bash
find /home -name "*.txt"              # найти все .txt файлы
find . -type f -size +100M            # файлы больше 100 МБ
find /var -mtime -1                   # измененные за последние 24 часа
find . -name "*.log" -exec rm {} \;   # найти и удалить .log файлы
```

## Текстовый редактор gedit

**gedit** — графический текстовый редактор для GNOME с простым интерфейсом.

**Основные возможности:**

- Подсветка синтаксиса для различных языков программирования
- Поддержка вкладок для работы с несколькими файлами
- Поиск и замена текста
- Нумерация строк
- Автоматические отступы
- Плагины для расширения функциональности

**Запуск:**
```bash
gedit filename.txt          # открыть файл
gedit file1.txt file2.txt   # открыть несколько файлов
gedit &                     # запустить в фоновом режиме
```

## Справочная система man

Команда `man` (manual) предоставляет доступ к справочным страницам команд и программ.

**Основной синтаксис:**
```bash
man [секция] команда
```

**Секции справочной системы:**

1. Пользовательские команды
2. Системные вызовы
3. Библиотечные функции
4. Специальные файлы
5. Форматы файлов
6. Игры
7. Разное
8. Системное администрирование

**Навигация в man:**
- **Пробел** — следующая страница
- **b** — предыдущая страница
- **/pattern** — поиск текста
- **n** — следующее совпадение
- **q** — выход

# Выполнение лабораторной работы

## Работа с командой find

Была изучена команда `find` для поиска файлов в системе. На рисунке @fig-find показан результат выполнения команды поиска.

![Использование команды find](image/find.png){#fig-find width=80%}

## Работа с текстовым редактором gedit

Было изучено использование графического текстового редактора gedit для создания и редактирования файлов. Работа с редактором показана на рисунке @fig-gedit.

![Работа с редактором gedit](image/gedit.png){#fig-gedit width=80%}

## Управление процессами с помощью kill

Была изучена команда `kill` для завершения процессов. Процесс работы показан на рисунке @fig-kill.

![Использование команды kill](image/kill.png){#fig-kill width=80%}

## Изучение справочной системы

Были изучены справочные страницы для различных команд:

```bash
man ps
man kill
man pstree
```

Справочная информация показана на рисунке @fig-man.

![Справочная страница команд](image/man.png){#fig-man width=80%}

## Просмотр дерева процессов

Было изучено отображение процессов в виде дерева с помощью команды `pstree`. Результат показан на рисунке @fig-pstree.

![Дерево процессов](image/pstree.png){#fig-pstree width=80%}

## Результаты выполнения команд

Финальные результаты выполнения различных команд показаны на рисунке @fig-result.

![Результаты выполнения команд](image/result.png){#fig-result width=80%}

## Практическая работа

В ходе работы были выполнены следующие команды:

```bash
# Поиск файлов
find /home -name "*.txt" -type f

# Запуск редактора
gedit example.txt

# Просмотр процессов
ps aux | head -10

# Завершение процесса
kill -9 <PID>

# Дерево процессов
pstree -p
```

# Выводы

В ходе лабораторной работы были успешно выполнены следующие задачи:

1. ✅ Освоены команды для управления процессами (ps, kill, pstree)
2. ✅ Изучено использование текстового редактора gedit
3. ✅ Практикован поиск файлов с помощью команды find
4. ✅ Изучена справочная система man
5. ✅ Выполнены операции навигации и работы с файлами

Получены фундаментальные навыки управления процессами в Linux, работы с текстовыми редакторами и эффективного поиска файлов в системе.

# Список литературы{.unnumbered}

::: {#refs}
- Linux Process Management: [https://linux.die.net/man/](https://linux.die.net/man/)
- Gedit Text Editor: [https://gedit-technology.github.io/](https://gedit-technology.github.io/)
- Find Command Tutorial: [https://www.tecmint.com/35-practical-examples-of-linux-find-command/](https://www.tecmint.com/35-practical-examples-of-linux-find-command/)
:::
