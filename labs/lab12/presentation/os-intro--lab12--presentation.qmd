---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05-24"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19

## Title
title: "Лабораторная работа №12"
subtitle: "Выполнение и отладка программ"
license: "CC BY"
---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="100%"}

  * Mohamed Musa
  * Студент группы НКАбд-05-24
  * Номер студенческого билета: 1032248286
  * Российский университет дружбы народов
  * [1032248286@pfur.ru](mailto:1032248286@pfur.ru)

:::
::::::::::::::

# Вводная часть

## Актуальность

::: incremental
- Выполнение программ — основа работы в операционной системе Linux
- Отладка — критически важный навык для разработчиков и системных администраторов
- Управление процессами необходимо для эффективной работы с системой
- Мониторинг процессов позволяет оптимизировать производительность
:::

## Объект и предмет исследования

- **Объект исследования**: процессы и программы в операционной системе Linux
- **Предмет исследования**: методы выполнения, отладки и мониторинга программ

## Цели и задачи

**Цель работы**: освоить методы выполнения и отладки программ в Linux

**Задачи:**

::: incremental
- Освоить запуск программ и скриптов в различных режимах
- Изучить отслеживание и мониторинг выполнения процессов
- Практиковать инструменты отладки программ
- Освоить управление фоновыми задачами
- Изучить перенаправление ввода-вывода и конвейеры
:::

## Материалы и методы

**Материалы:**

::: incremental
- Операционная система Linux
- Bash скрипты для тестирования
- Программы на языке C
- Компилятор GCC
:::

**Методы:**

::: incremental
- Практическое выполнение команд
- Отладка с помощью GDB
- Трассировка системных вызовов
- Мониторинг процессов
:::

# Теоретические сведения

## Процессы в Linux

**Процесс** — это запущенный экземпляр программы, выполняющийся в операционной системе

**Основные характеристики:**

::: incremental
- **PID (Process ID)** — уникальный идентификатор процесса
- **PPID (Parent Process ID)** — идентификатор родительского процесса
- **UID (User ID)** — идентификатор пользователя
- **Состояние** — running, sleeping, stopped, zombie
- **Приоритет** — значение nice от -20 (высший) до 19 (низший)
:::

## Типы процессов

::: incremental
- **Интерактивные** — запущенные из терминала, требуют взаимодействия
- **Фоновые (background)** — выполняются в фоне, не блокируют терминал
- **Демоны (daemons)** — системные процессы, работающие постоянно
:::

## Запуск программ

**Обычный запуск:**

```bash
./program          # запуск исполняемого файла
bash script.sh     # запуск bash скрипта
```

**Фоновое выполнение:**

```bash
./program &        # запуск в фоне
```

**С nohup:**

```bash
nohup ./program &  # продолжит работу после закрытия терминала
```

## Управление задачами

**Основные команды:**

::: incremental
- `jobs` — просмотр фоновых задач
- `jobs -l` — с отображением PID
- `fg %1` — перевод задачи на передний план
- `bg %1` — продолжить выполнение в фоне
- `Ctrl+Z` — приостановить текущую задачу
- `Ctrl+C` — прервать текущую задачу
:::

## Перенаправление вывода

**Стандартные потоки:**

::: incremental
- **stdin (0)** — стандартный ввод (клавиатура)
- **stdout (1)** — стандартный вывод (экран)
- **stderr (2)** — стандартный вывод ошибок (экран)
:::

## Операторы перенаправления

::: incremental
- `>` — перенаправление вывода (перезапись)
- `>>` — добавление в конец файла
- `<` — перенаправление ввода
- `2>` — перенаправление ошибок
- `2>&1` — объединение stdout и stderr
- `|` — конвейер (pipe)
:::

## Примеры перенаправления

```bash
# Перенаправление вывода
./program > output.txt

# Перенаправление ошибок
./program 2> errors.txt

# Оба потока в один файл
./program > output.txt 2>&1

# Отбросить вывод
./program > /dev/null 2>&1
```

## Конвейеры (Pipes)

**Конвейер** — передача вывода одной команды на вход другой:

```bash
command1 | command2
```

**Примеры:**

::: incremental
- `ps aux | grep firefox` — поиск процесса
- `ps aux | wc -l` — подсчет процессов
- `cat file.txt | sort | uniq` — сортировка и удаление дубликатов
:::


## Мониторинг процессов: ps

**Команда ps** — информация о процессах:

::: incremental
- `ps` — процессы текущего терминала
- `ps -e` — все процессы
- `ps aux` — подробная информация
- `ps -u username` — процессы пользователя
- `ps -p PID` — информация о конкретном процессе
:::

## Мониторинг процессов: top

**Команда top** — интерактивный мониторинг в реальном времени

**Клавиши управления:**

::: incremental
- `q` — выход
- `k` — убить процесс
- `M` — сортировка по памяти
- `P` — сортировка по CPU
- `u` — фильтр по пользователю
:::

## Мониторинг процессов: htop

**Команда htop** — улучшенная версия top

**Преимущества:**

::: incremental
- Цветной интерфейс
- Использование мыши
- Древовидное отображение процессов
- Легкое управление процессами
:::

## Поиск процессов

::: incremental
- `pgrep firefox` — найти PID процессов firefox
- `pidof firefox` — найти PID по имени программы
- `ps aux | grep firefox` — поиск с помощью grep
:::

## Управление процессами: kill

**Команда kill** — отправка сигналов процессам:

::: incremental
- `kill PID` — отправить SIGTERM (корректное завершение)
- `kill -9 PID` — отправить SIGKILL (принудительное завершение)
- `kill -STOP PID` — приостановить процесс
- `kill -CONT PID` — продолжить процесс
:::

## Управление процессами: killall и pkill

::: incremental
- `killall firefox` — завершить все процессы firefox
- `pkill firefox` — завершить процессы по шаблону
- `killall -9 program` — принудительно завершить
:::

## Приоритеты процессов

**Команда nice** — запуск с заданным приоритетом:

```bash
nice -n 10 ./program    # низкий приоритет
nice -n -5 ./program    # высокий приоритет (root)
```

**Команда renice** — изменение приоритета:

```bash
renice -n 5 -p PID      # установить приоритет 5
```

## Отладка bash скриптов

**Опции отладки:**

::: incremental
- `bash -x script.sh` — вывод выполняемых команд (трассировка)
- `bash -v script.sh` — вывод строк скрипта
- `bash -n script.sh` — проверка синтаксиса без выполнения
:::

**В скрипте:**

```bash
set -x    # включить трассировку
set +x    # выключить трассировку
set -e    # прервать при ошибке
```

## Отладка с помощью GDB

**GDB (GNU Debugger)** — мощный отладчик для C/C++

**Компиляция:**

```bash
gcc -g program.c -o program
```

**Запуск:**

```bash
gdb ./program
```

## Основные команды GDB (1)

::: incremental
- `run` — запустить программу
- `run arg1 arg2` — запустить с аргументами
- `break main` — точка останова в функции main
- `break file.c:10` — точка останова на строке 10
:::

## Основные команды GDB (2)

::: incremental
- `next` — выполнить следующую строку (не входя в функции)
- `step` — выполнить следующую строку (входя в функции)
- `continue` — продолжить выполнение
- `finish` — выполнить до конца функции
:::

## Основные команды GDB (3)

::: incremental
- `print variable` — вывести значение переменной
- `display variable` — автоматически выводить при каждой остановке
- `backtrace` — стек вызовов
- `list` — показать исходный код
- `quit` — выйти из GDB
:::

## Трассировка системных вызовов

**Команда strace** — трассировка системных вызовов:

::: incremental
- `strace ./program` — трассировка всех вызовов
- `strace -o output.txt ./program` — вывод в файл
- `strace -c ./program` — статистика вызовов
- `strace -e open ./program` — только вызовы open
- `strace -p PID` — подключиться к запущенному процессу
:::

## Трассировка библиотечных функций

**Команда ltrace** — трассировка вызовов библиотечных функций:

```bash
ltrace ./program               # трассировка
ltrace -c ./program            # статистика
ltrace -o output.txt ./program # вывод в файл
```

## Профилирование программ

**Команда time** — измерение времени выполнения:

```bash
time ./program
```

**Вывод:**

::: incremental
- `real` — реальное время
- `user` — время CPU в пользовательском режиме
- `sys` — время CPU в режиме ядра
:::

## Valgrind

**valgrind** — поиск утечек памяти и ошибок:

```bash
valgrind ./program
valgrind --leak-check=full ./program
```

**Применение:**

::: incremental
- Поиск утечек памяти
- Обнаружение неинициализированных переменных
- Проверка работы с памятью
- Профилирование производительности
:::

# Выполнение работы

## Создание тестовых программ

Были созданы тестовые программы для практики:

::: incremental
- Bash скрипт с циклом и выводом информации
- Программа на C с обработкой аргументов
- Компиляция с отладочной информацией (`-g`)
:::

## Содержимое bash скрипта

![Содержимое тестового скрипта](image/content1.png){width=70%}

## Содержимое программы на C

![Содержимое программы на C](image/content2.png){width=70%}

## Компиляция программы

Программа была скомпилирована с различными опциями:

```bash
# Обычная компиляция
gcc test_program.c -o test_program

# С отладочной информацией
gcc -g test_program.c -o test_program_debug

# С предупреждениями
gcc -Wall -g test_program.c -o test_program
```

## Запуск на переднем плане

![Запуск программ на переднем плане](image/run1.png){width=70%}

## Фоновое выполнение

![Запуск программ в фоновом режиме](image/run2.png){width=70%}

## Управление задачами

Практика управления фоновыми задачами:

::: incremental
- Запуск программы: `./test_program`
- Приостановка: `Ctrl+Z`
- Продолжение в фоне: `bg %1`
- Просмотр задач: `jobs`
- Перевод на передний план: `fg %1`
:::

## Перенаправление ввода-вывода

Практика перенаправления:

```bash
# Вывод в файл
./test_program > output.txt

# Ошибки в файл
./test_program 2> errors.txt

# Оба потока
./test_program > output.txt 2>&1

# Отбросить вывод
./test_program > /dev/null 2>&1
```

## Использование конвейеров

Создание цепочек команд:

```bash
# Поиск процессов
ps aux | grep test_program

# Подсчет процессов
ps aux | grep test_program | wc -l

# Сортировка по памяти
ps aux | sort -k4 -rn | head -10
```

## Мониторинг процессов

Использование инструментов мониторинга:

::: incremental
- `ps aux` — просмотр всех процессов
- `ps -u $USER` — процессы текущего пользователя
- `pgrep test_program` — поиск PID
- `top` — интерактивный мониторинг
- `htop` — улучшенный мониторинг
:::

## Отладка bash скрипта

Отладка с различными опциями:

```bash
# Проверка синтаксиса
bash -n test_script.sh

# Трассировка выполнения
bash -x test_script.sh

# Вывод строк
bash -v test_script.sh
```

## Отладка с помощью GDB

Практика отладки программы на C:

::: incremental
- Запуск GDB: `gdb ./test_program_debug`
- Установка точки останова: `break main`
- Запуск программы: `run arg1 arg2`
- Пошаговое выполнение: `next`, `step`
- Вывод переменных: `print argc`
- Продолжение: `continue`
:::

## Трассировка системных вызовов

Использование strace:

```bash
# Трассировка всех вызовов
strace ./test_program

# Вывод в файл
strace -o trace.txt ./test_program

# Статистика
strace -c ./test_program

# Только файловые операции
strace -e trace=file ./test_program
```

## Управление приоритетами

Практика изменения приоритетов:

```bash
# Запуск с низким приоритетом
nice -n 10 ./test_program

# Изменение приоритета
PID=$(pgrep test_program)
renice -n 5 -p $PID

# Проверка приоритета
ps -o pid,ni,cmd -p $PID
```

## Завершение процессов

Различные способы завершения:

::: incremental
- `kill $(pgrep test_program)` — корректное завершение
- `kill -9 $(pgrep test_program)` — принудительное
- `killall test_program` — по имени
- `pkill test_` — по шаблону
:::

# Результаты

## Выполненные задачи (1)

::: incremental
- ✅ **Освоен запуск программ и скриптов**
  - Обычный запуск на переднем плане
  - Фоновое выполнение с `&`
  - Запуск с `nohup` для долгих задач
  - Компиляция программ на C
:::

## Выполненные задачи (2)

::: incremental
- ✅ **Изучено отслеживание выполнения процессов**
  - Команда `ps` для просмотра процессов
  - Интерактивный мониторинг с `top` и `htop`
  - Поиск процессов с `pgrep` и `pidof`
  - Детальная информация о процессах
:::

## Выполненные задачи (3)

::: incremental
- ✅ **Практикованы инструменты отладки программ**
  - Отладка bash скриптов с `-x`, `-v`, `-n`
  - Отладчик GDB для программ на C/C++
  - Трассировка системных вызовов с `strace`
  - Трассировка библиотечных функций с `ltrace`
:::

## Выполненные задачи (4)

::: incremental
- ✅ **Освоено управление фоновыми задачами**
  - Команда `jobs` для просмотра задач
  - Команды `fg` и `bg` для управления
  - Приостановление с `Ctrl+Z`
  - Завершение с `kill`, `killall`, `pkill`
:::

## Выполненные задачи (5)

::: incremental
- ✅ **Изучено перенаправление ввода-вывода**
  - Перенаправление stdout и stderr
  - Конвейеры для связывания команд
  - Использование `/dev/null`
  - Команда `tee` для дублирования вывода
:::

## Дополнительные навыки

::: incremental
- ✅ Управление приоритетами с `nice` и `renice`
- ✅ Профилирование с `time`, `gprof`, `valgrind`
- ✅ Точки останова и пошаговое выполнение в GDB
- ✅ Анализ стека вызовов и переменных
- ✅ Создание сложных конвейеров команд
- ✅ Мониторинг использования CPU и памяти
:::

## Полученные знания

**Освоены:**

::: incremental
- **Управление процессами** — запуск, мониторинг, завершение
- **Фоновое выполнение** — работа с задачами
- **Перенаправление потоков** — управление вводом-выводом
- **Конвейеры** — создание цепочек команд
- **Отладка** — поиск и исправление ошибок
- **Мониторинг** — отслеживание производительности
:::

# Заключение

## Выводы

::: incremental
- Освоены методы запуска и управления программами в Linux
- Изучены инструменты отладки и мониторинга процессов
- Получены навыки работы с фоновыми задачами
- Практикованы конвейеры и перенаправление потоков
- Освоены инструменты профилирования и оптимизации
:::

## Практическое применение (1)

::: incremental
- **Системное администрирование** — управление службами и процессами
- **Разработка ПО** — отладка программ и поиск ошибок
- **Автоматизация** — создание скриптов для фоновых задач
:::

## Практическое применение (2)

::: incremental
- **Мониторинг систем** — отслеживание производительности приложений
- **DevOps** — управление процессами в production окружении
- **Оптимизация** — профилирование и улучшение производительности
:::

## Значимость навыков

Полученные навыки являются **фундаментальными** для:

::: incremental
- Эффективной работы в Linux
- Системного администрирования
- Разработки программного обеспечения
- DevOps и автоматизации
:::

## {.standout}

Спасибо за внимание!

