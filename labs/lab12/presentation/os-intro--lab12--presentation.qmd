---
## Author
author:
  name: Mohamed Musa
  student_number: "1032248286"
  group: "НКАбд-05-24"
  year: "2 год"
  email: "1032248286@pfur.ru"
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 19
## Title
title: "Лабораторная работа №12"
subtitle: "Программирование в командном процессоре ОС UNIX. Расширенное программирование"
license: CC BY
date: today
date-format: "YYYY-MM-DD"
---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="70%"}

  * Mohamed Musa
  * Студенческий билет: 1032248286
  * Группа: НКАбд-05-24
  * 2 год обучения
  * Российский университет дружбы народов
  * [1032248286@pfur.ru](mailto:1032248286@pfur.ru)

:::
::: {.column width="30%"}

:::
::::::::::::::

# Вводная часть

## Цели и задачи

::: incremental

- **Цель работы**
  - Изучить основы программирования в оболочке ОС UNIX
  - Научиться писать сложные командные файлы

- **Задачи**
  - Создать скрипт резервного копирования
  - Обработать произвольное число аргументов
  - Реализовать аналог команды ls
  - Подсчитать файлы по расширению

:::

# Теоретическое введение

## Командная оболочка bash

**Bash (Bourne Again Shell)** — командная оболочка UNIX.

::: incremental

- Выполнение команд и программ
- Переменные окружения
- Условные операторы (if, case)
- Циклы (for, while, until)
- Функции
- Обработка аргументов

:::

## Специальные переменные

**Аргументы командной строки:**

::: incremental

- \`$0\` — имя скрипта
- \`$1, $2, ..., $9\` — первые 9 аргументов
- \`${10}, ${11}, ...\` — аргументы с 10-го
- \`$#\` — количество аргументов
- \`$@\` — все аргументы как отдельные слова
- \`$*\` — все аргументы как одна строка

:::

## Другие переменные

::: incremental

- \`$?\` — код возврата последней команды
- \`$$\` — PID текущего процесса
- \`$!\` — PID последнего фонового процесса
- \`$HOME\` — домашний каталог
- \`$USER\` — имя пользователя

:::

## Условные операторы

**Проверка файлов:**

::: incremental

- \`-e file\` — файл существует
- \`-f file\` — обычный файл
- \`-d file\` — директория
- \`-r file\` — доступен для чтения
- \`-w file\` — доступен для записи
- \`-x file\` — исполняемый

:::

## Сравнение чисел

::: incremental

- \`-eq\` — равно
- \`-ne\` — не равно
- \`-lt\` — меньше
- \`-le\` — меньше или равно
- \`-gt\` — больше
- \`-ge\` — больше или равно

:::

# Выполнение работы

## Задание 1: Резервное копирование

**Задача:** Создать скрипт, делающий резервную копию самого себя в директорию \`~/backup\` с архивацией.

**Основные шаги:**

::: incremental

1. Создать директорию backup
2. Получить имя скрипта
3. Создать временную метку
4. Заархивировать файл
5. Вывести сообщение

:::

## Скрипт backup_script.sh

```bash
#!/bin/bash
# Create backup directory
BACKUP_DIR="$HOME/backup"
mkdir -p "$BACKUP_DIR"

# Get script name
SCRIPT_NAME=$(basename "$0")

# Create timestamp
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Create backup
BACKUP_FILE="$BACKUP_DIR/${SCRIPT_NAME}_${TIMESTAMP}.zip"
zip -j "$BACKUP_FILE" "$0"

echo "Backup created: $BACKUP_FILE"
```

## Содержимое скрипта

![Скрипт backup_script.sh](image/content1.png){width=70%}

## Демонстрация работы

**Результат выполнения:**

```
adding: backup_script.sh (deflated 42%)
Backup created: /home/user/backup/backup_script.sh_20251013_225107.zip
```

**Создается архив с временной меткой в директории ~/backup**

## Задание 2: Обработка аргументов

**Задача:** Создать скрипт, обрабатывающий любое количество аргументов командной строки.

**Два метода:**

::: incremental

1. Цикл \`for\` с \`"$@"\`
2. Цикл \`while\` с индексацией

:::

## Скрипт argument_handler.sh

```bash
#!/bin/bash
echo "Number of arguments: $#"

# Method 1: for loop
counter=1
for arg in "$@"; do
    echo "Argument $counter: $arg"
    ((counter++))
done

# Method 2: while loop
index=1
while [ $index -le $# ]; do
    eval "current_arg=\${$index}"
    echo "Argument $index: $current_arg"
    ((index++))
done
```

## Содержимое скрипта

![Скрипт argument_handler.sh](image/content2.png){width=70%}

## Демонстрация работы

**Пример запуска с 12 аргументами:**

```bash
./argument_handler.sh arg1 arg2 arg3 "argument with spaces" \
  arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12
```

**Результат:** Скрипт успешно обрабатывает все аргументы двумя способами

## Задание 3: Аналог ls

**Задача:** Создать командный файл — аналог команды ls без использования самой команды ls.

**Требования:**

::: incremental

- Вывод информации о каталоге
- Права доступа к файлам
- Владелец и размер
- Индикаторы типов файлов

:::

## Скрипт ls_like.sh (часть 1)

```bash
#!/bin/bash
DIRECTORY="${1:-.}"

# Check if directory exists
if [ ! -d "$DIRECTORY" ]; then
    echo "Error: not a directory" >&2
    exit 1
fi

# Process each item
for item in "$DIRECTORY"/*; do
    basename_item=$(basename "$item")

    if [ -e "$item" ]; then
        # Get file info using stat
        permissions=$(stat -c "%A" "$item")
        owner=$(stat -c "%U" "$item")
        size=$(stat -c "%s" "$item")
```

## Скрипт ls_like.sh (часть 2)

```bash
        # Determine file type
        if [ -d "$item" ]; then
            name_with_indicator="$basename_item/"
        elif [ -L "$item" ]; then
            name_with_indicator="$basename_item@"
        elif [ -x "$item" ]; then
            name_with_indicator="$basename_item*"
        else
            name_with_indicator="$basename_item"
        fi

        # Print formatted output
        printf "%-10s %-10s %8s %s\n" \
            "$permissions" "$owner" "$size" \
            "$name_with_indicator"
    fi
done
```

## Содержимое ls_like.sh

![Содержимое скрипта ls_like.sh](image/program1.png){width=70%}

## Запуск ls_like.sh

![Выполнение скрипта ls_like.sh](image/shcontent1.png){width=70%}

## Задание 4: Подсчет файлов

**Задача:** Создать скрипт для подсчета файлов с заданным расширением в указанной директории.

**Аргументы:**

::: incremental

1. Расширение файла (.txt, .pdf и т.д.)
2. Путь к директории

:::

## Скрипт file_counter.sh

```bash
#!/bin/bash
# Check arguments
if [ $# -ne 2 ]; then
    echo "Usage: $0 <extension> <directory>"
    exit 1
fi

EXTENSION=$1
DIRECTORY=$2

# Check directory exists
if [ ! -d "$DIRECTORY" ]; then
    echo "Error: Directory does not exist"
    exit 1
fi

# Count files
COUNT=$(find "$DIRECTORY" -type f -name "*$EXTENSION" | wc -l)

echo "Files with $EXTENSION in $DIRECTORY: $COUNT"
```

## Запуск file_counter.sh

![Выполнение скрипта file_counter.sh](image/run2.png){width=70%}

# Выводы

## Полученные навыки

::: incremental

- ✅ Работа с файловой системой
  - Создание директорий, проверка существования
  - Получение информации о файлах

- ✅ Архивация файлов
  - Использование zip
  - Работа с временными метками

- ✅ Обработка аргументов
  - Специальные переменные ($#, $@)
  - Итерация по аргументам

:::

## Полученные навыки (продолжение)

::: incremental

- ✅ Циклы и условия
  - Циклы for и while
  - Условный оператор if
  - Инкремент счетчиков

- ✅ Работа с командами
  - find для поиска файлов
  - stat для метаданных
  - wc для подсчета

- ✅ Форматирование вывода
  - printf для форматирования
  - Индикаторы типов файлов

:::

## Практическое применение

**Освоенные техники позволяют:**

::: incremental

- Автоматизировать задачи администрирования
- Создавать скрипты резервного копирования
- Обрабатывать большое количество файлов
- Создавать утилиты для файловой системы
- Писать переносимые скрипты для UNIX

:::

## Заключение

Все четыре скрипта успешно выполняют поставленные задачи и демонстрируют различные аспекты программирования в bash.

# Список литературы{.unnumbered}

- Advanced Bash-Scripting Guide: [https://tldp.org/LDP/abs/html/](https://tldp.org/LDP/abs/html/)
- Bash Reference Manual: [https://www.gnu.org/software/bash/manual/](https://www.gnu.org/software/bash/manual/)
- Linux Command Line and Shell Scripting Bible
